import unittest

from xplore_path.evaluator import evaluate
from xplore_path.paths.dummy.dummy_path import DummyPath


class EvaluatorTest(unittest.TestCase):
    def test_must_apply_and_single_vs_single(self):
        self.assertEqual(evaluate(DummyPath(), 'true and true'), True)
        self.assertEqual(evaluate(DummyPath(), 'true and false'), False)
        self.assertEqual(evaluate(DummyPath(), 'false and true'), False)
        self.assertEqual(evaluate(DummyPath(), 'false and false'), False)

        self.assertEqual(evaluate(DummyPath(), 'a and true'), True)  # non-empty string coerces to true
        self.assertEqual(evaluate(DummyPath(), 'a and false'), False)  # non-empty string coerces to true
        self.assertEqual(evaluate(DummyPath(), 'true and a'), True)  # non-empty string coerces to true
        self.assertEqual(evaluate(DummyPath(), 'false and a'), False)  # non-empty string coerces to true

        self.assertEqual(evaluate(DummyPath(), '"" and true'), False)  # empty string coerces to false
        self.assertEqual(evaluate(DummyPath(), '"" and false'), False)  # empty string coerces to false
        self.assertEqual(evaluate(DummyPath(), 'true and ""'), False)  # empty string coerces to false
        self.assertEqual(evaluate(DummyPath(), 'false and ""'), False)  # empty string coerces to false

        self.assertEqual(evaluate(DummyPath(), '0 and true'), False)  # 0 coerces to false
        self.assertEqual(evaluate(DummyPath(), '0 and false'), False)  # 0 coerces to false
        self.assertEqual(evaluate(DummyPath(), 'true and 0'), False)  # 0 coerces to false
        self.assertEqual(evaluate(DummyPath(), 'false and 0'), False)  # 0 coerces to false

        self.assertEqual(evaluate(DummyPath(), 'nan and true'), False)  # nan coerces to false
        self.assertEqual(evaluate(DummyPath(), 'nan and false'), False)  # nan coerces to false
        self.assertEqual(evaluate(DummyPath(), 'true and nan'), False)  # nan coerces to false
        self.assertEqual(evaluate(DummyPath(), 'false and nan'), False)  # nan coerces to false

        self.assertEqual(evaluate(DummyPath(), '1 and true'), True)  # non-0 coerces to true
        self.assertEqual(evaluate(DummyPath(), '1 and false'), False)  # non-0 coerces to true
        self.assertEqual(evaluate(DummyPath(), 'true and 1'), True)  # non-0 coerces to true
        self.assertEqual(evaluate(DummyPath(), 'false and 1'), False)  # non-0 coerces to true

        self.assertEqual(evaluate(DummyPath(), '-1 and true'), True)  # non-0 coerces to true (even if its negative)
        self.assertEqual(evaluate(DummyPath(), '-1 and false'), False)  # non-0 coerces to true (even if its negative)
        self.assertEqual(evaluate(DummyPath(), 'true and -1'), True)  # non-0 coerces to true (even if its negative)
        self.assertEqual(evaluate(DummyPath(), 'false and -1'), False)  # non-0 coerces to true (even if its negative)

    def test_must_apply_and_single_vs_seq_using_zip_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), 'true zip sequence and {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), 'true zip sequence and {true, false}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), 'true zip sequence and {1, nan, "s", ""}'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), 'true zip sequence and {1, "s", true}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), 'true zip sequence and {0, nan, ""}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '"a" zip sequence and {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '"a" zip sequence and {true, false}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '"a" zip sequence and {1, nan, "s", ""}'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '"a" zip sequence and {1, "s", true}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '"a" zip sequence and {0, nan, ""}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '1 zip sequence and {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '1 zip sequence and {true, false}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '1 zip sequence and {1, nan, "s", ""}'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '1 zip sequence and {1, "s", true}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '1 zip sequence and {0, nan, ""}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '1.5 zip sequence and {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '1.5 zip sequence and {true, false}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '1.5 zip sequence and {1, nan, "s", ""}'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '1.5 zip sequence and {1, "s", true}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '1.5 zip sequence and {0, nan, ""}'), [False, False, False])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), 'false zip sequence and {true, true}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), 'false zip sequence and {true, false}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), 'false zip sequence and {1, nan, "s", ""}'), [False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), 'false zip sequence and {1, "s", False}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), 'false zip sequence and {0, nan, ""}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '"" zip sequence and {true, true}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '"" zip sequence and {true, false}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '"" zip sequence and {1, nan, "s", ""}'), [False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), '"" zip sequence and {1, "s", False}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '"" zip sequence and {0, nan, ""}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '0 zip sequence and {true, true}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '0 zip sequence and {true, false}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '0 zip sequence and {1, nan, "s", ""}'), [False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), '0 zip sequence and {1, "s", true}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '0 zip sequence and {0, nan, ""}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), 'nan zip sequence and {true, true}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), 'nan zip sequence and {true, false}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), 'nan zip sequence and {1, nan, "s", ""}'), [False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), 'nan zip sequence and {1, "s", true}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), 'nan zip sequence and {0, nan, ""}'), [False, False, False])
        # empty
        self.assertEqual(evaluate(DummyPath(), 'true zip sequence and {}'), [])

    def test_must_apply_and_single_vs_seq_using_zip_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), 'true zip any and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), 'true zip any and {true, false}'), True)
        self.assertEqual(evaluate(DummyPath(), 'true zip any and {1, nan, "s", ""}'), True)
        self.assertEqual(evaluate(DummyPath(), 'true zip any and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), 'true zip any and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '"a" zip any and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '"a" zip any and {true, false}'), True)
        self.assertEqual(evaluate(DummyPath(), '"a" zip any and {1, nan, "s", ""}'), True)
        self.assertEqual(evaluate(DummyPath(), '"a" zip any and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), '"a" zip any and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '1 zip any and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '1 zip any and {true, false}'), True)
        self.assertEqual(evaluate(DummyPath(), '1 zip any and {1, nan, "s", ""}'), True)
        self.assertEqual(evaluate(DummyPath(), '1 zip any and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), '1 zip any and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '1.5 zip any and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '1.5 zip any and {true, false}'), True)
        self.assertEqual(evaluate(DummyPath(), '1.5 zip any and {1, nan, "s", ""}'), True)
        self.assertEqual(evaluate(DummyPath(), '1.5 zip any and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), '1.5 zip any and {0, nan, ""}'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), 'false zip any and {true, true}'), False)
        self.assertEqual(evaluate(DummyPath(), 'false zip any and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), 'false zip any and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), 'false zip any and {1, "s", False}'), False)
        self.assertEqual(evaluate(DummyPath(), 'false zip any and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" zip any and {true, true}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" zip any and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" zip any and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" zip any and {1, "s", False}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" zip any and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 zip any and {true, true}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 zip any and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 zip any and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 zip any and {1, "s", true}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 zip any and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan zip any and {true, true}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan zip any and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan zip any and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan zip any and {1, "s", true}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan zip any and {0, nan, ""}'), False)
        # empty
        self.assertEqual(evaluate(DummyPath(), 'true zip any and {}'), False)
    
    def test_must_apply_and_single_vs_seq_using_zip_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), 'true zip all and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), 'true zip all and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), 'true zip all and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), 'true zip all and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), 'true zip all and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '"a" zip all and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '"a" zip all and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), '"a" zip all and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '"a" zip all and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), '"a" zip all and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '1 zip all and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '1 zip all and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), '1 zip all and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '1 zip all and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), '1 zip all and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '1.5 zip all and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '1.5 zip all and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), '1.5 zip all and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '1.5 zip all and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), '1.5 zip all and {0, nan, ""}'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), 'false zip all and {true, true}'), False)
        self.assertEqual(evaluate(DummyPath(), 'false zip all and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), 'false zip all and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), 'false zip all and {1, "s", False}'), False)
        self.assertEqual(evaluate(DummyPath(), 'false zip all and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" zip all and {true, true}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" zip all and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" zip all and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" zip all and {1, "s", False}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" zip all and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 zip all and {true, true}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 zip all and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 zip all and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 zip all and {1, "s", true}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 zip all and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan zip all and {true, true}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan zip all and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan zip all and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan zip all and {1, "s", true}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan zip all and {0, nan, ""}'), False)
        # empty
        self.assertEqual(evaluate(DummyPath(), 'true zip all and {}'), True)

    def test_must_apply_and_single_vs_seq_using_product_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), 'true product sequence and {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), 'true product sequence and {true, false}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), 'true product sequence and {1, nan, "s", ""}'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), 'true product sequence and {1, "s", true}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), 'true product sequence and {0, nan, ""}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '"a" product sequence and {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '"a" product sequence and {true, false}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '"a" product sequence and {1, nan, "s", ""}'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '"a" product sequence and {1, "s", true}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '"a" product sequence and {0, nan, ""}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '1 product sequence and {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '1 product sequence and {true, false}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '1 product sequence and {1, nan, "s", ""}'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '1 product sequence and {1, "s", true}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '1 product sequence and {0, nan, ""}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '1.5 product sequence and {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '1.5 product sequence and {true, false}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '1.5 product sequence and {1, nan, "s", ""}'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '1.5 product sequence and {1, "s", true}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '1.5 product sequence and {0, nan, ""}'), [False, False, False])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), 'false product sequence and {true, true}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), 'false product sequence and {true, false}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), 'false product sequence and {1, nan, "s", ""}'), [False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), 'false product sequence and {1, "s", False}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), 'false product sequence and {0, nan, ""}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '"" product sequence and {true, true}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '"" product sequence and {true, false}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '"" product sequence and {1, nan, "s", ""}'), [False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), '"" product sequence and {1, "s", False}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '"" product sequence and {0, nan, ""}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '0 product sequence and {true, true}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '0 product sequence and {true, false}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '0 product sequence and {1, nan, "s", ""}'), [False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), '0 product sequence and {1, "s", true}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '0 product sequence and {0, nan, ""}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), 'nan product sequence and {true, true}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), 'nan product sequence and {true, false}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), 'nan product sequence and {1, nan, "s", ""}'), [False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), 'nan product sequence and {1, "s", true}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), 'nan product sequence and {0, nan, ""}'), [False, False, False])
        # empty
        self.assertEqual(evaluate(DummyPath(), 'true product sequence and {}'), [])

    def test_must_apply_and_single_vs_seq_using_product_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), 'true product any and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), 'true product any and {true, false}'), True)
        self.assertEqual(evaluate(DummyPath(), 'true product any and {1, nan, "s", ""}'), True)
        self.assertEqual(evaluate(DummyPath(), 'true product any and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), 'true product any and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '"a" product any and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '"a" product any and {true, false}'), True)
        self.assertEqual(evaluate(DummyPath(), '"a" product any and {1, nan, "s", ""}'), True)
        self.assertEqual(evaluate(DummyPath(), '"a" product any and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), '"a" product any and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '1 product any and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '1 product any and {true, false}'), True)
        self.assertEqual(evaluate(DummyPath(), '1 product any and {1, nan, "s", ""}'), True)
        self.assertEqual(evaluate(DummyPath(), '1 product any and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), '1 product any and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '1.5 product any and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '1.5 product any and {true, false}'), True)
        self.assertEqual(evaluate(DummyPath(), '1.5 product any and {1, nan, "s", ""}'), True)
        self.assertEqual(evaluate(DummyPath(), '1.5 product any and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), '1.5 product any and {0, nan, ""}'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), 'false product any and {true, true}'), False)
        self.assertEqual(evaluate(DummyPath(), 'false product any and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), 'false product any and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), 'false product any and {1, "s", False}'), False)
        self.assertEqual(evaluate(DummyPath(), 'false product any and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" product any and {true, true}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" product any and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" product any and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" product any and {1, "s", False}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" product any and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 product any and {true, true}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 product any and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 product any and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 product any and {1, "s", true}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 product any and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan product any and {true, true}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan product any and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan product any and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan product any and {1, "s", true}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan product any and {0, nan, ""}'), False)
        # empty
        self.assertEqual(evaluate(DummyPath(), 'true product any and {}'), False)

    def test_must_apply_and_single_vs_seq_using_product_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), 'true product all and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), 'true product all and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), 'true product all and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), 'true product all and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), 'true product all and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '"a" product all and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '"a" product all and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), '"a" product all and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '"a" product all and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), '"a" product all and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '1 product all and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '1 product all and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), '1 product all and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '1 product all and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), '1 product all and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '1.5 product all and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '1.5 product all and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), '1.5 product all and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '1.5 product all and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), '1.5 product all and {0, nan, ""}'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), 'false product all and {true, true}'), False)
        self.assertEqual(evaluate(DummyPath(), 'false product all and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), 'false product all and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), 'false product all and {1, "s", False}'), False)
        self.assertEqual(evaluate(DummyPath(), 'false product all and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" product all and {true, true}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" product all and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" product all and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" product all and {1, "s", False}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" product all and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 product all and {true, true}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 product all and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 product all and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 product all and {1, "s", true}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 product all and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan product all and {true, true}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan product all and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan product all and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan product all and {1, "s", true}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan product all and {0, nan, ""}'), False)
        # empty
        self.assertEqual(evaluate(DummyPath(), 'true product all and {}'), True)
        
    def test_must_apply_and_single_vs_seq(self):  # equiv to product any
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), 'true and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), 'true and {true, false}'), True)
        self.assertEqual(evaluate(DummyPath(), 'true and {1, nan, "s", ""}'), True)
        self.assertEqual(evaluate(DummyPath(), 'true and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), 'true and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '"a" and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '"a" and {true, false}'), True)
        self.assertEqual(evaluate(DummyPath(), '"a" and {1, nan, "s", ""}'), True)
        self.assertEqual(evaluate(DummyPath(), '"a" and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), '"a" and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '1 and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '1 and {true, false}'), True)
        self.assertEqual(evaluate(DummyPath(), '1 and {1, nan, "s", ""}'), True)
        self.assertEqual(evaluate(DummyPath(), '1 and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), '1 and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '1.5 and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '1.5 and {true, false}'), True)
        self.assertEqual(evaluate(DummyPath(), '1.5 and {1, nan, "s", ""}'), True)
        self.assertEqual(evaluate(DummyPath(), '1.5 and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), '1.5 and {0, nan, ""}'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), 'false and {true, true}'), False)
        self.assertEqual(evaluate(DummyPath(), 'false and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), 'false and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), 'false and {1, "s", False}'), False)
        self.assertEqual(evaluate(DummyPath(), 'false and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" and {true, true}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" and {1, "s", False}'), False)
        self.assertEqual(evaluate(DummyPath(), '"" and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 and {true, true}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 and {1, "s", true}'), False)
        self.assertEqual(evaluate(DummyPath(), '0 and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan and {true, true}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan and {true, false}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan and {1, nan, "s", ""}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan and {1, "s", true}'), False)
        self.assertEqual(evaluate(DummyPath(), 'nan and {0, nan, ""}'), False)
        # empty
        self.assertEqual(evaluate(DummyPath(), 'true and {}'), False)

    def test_must_apply_and_seq_vs_single_using_zip_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence and true'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip sequence and true'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip sequence and true'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip sequence and true'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip sequence and true'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence and "a"'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip sequence and "a"'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip sequence and "a"'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip sequence and "a"'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip sequence and "a"'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence and 1'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip sequence and 1'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip sequence and 1'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip sequence and 1'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip sequence and 1'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence and 1.5'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip sequence and 1.5'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip sequence and 1.5'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip sequence and 1.5'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip sequence and 1.5'), [False, False, False])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence and false'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip sequence and false'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip sequence and false'), [False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} zip sequence and false'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip sequence and false'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence and ""'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip sequence and ""'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip sequence and ""'), [False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} zip sequence and ""'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip sequence and ""'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence and 0'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip sequence and 0'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip sequence and 0'), [False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip sequence and 0'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip sequence and 0'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence and nan'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip sequence and nan'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip sequence and nan'), [False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip sequence and nan'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip sequence and nan'), [False, False, False])
        # empty
        self.assertEqual(evaluate(DummyPath(), '{} zip sequence and true'), [])

    def test_must_apply_and_seq_vs_single_using_zip_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any and true'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip any and true'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip any and true'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip any and true'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip any and true'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any and "a"'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip any and "a"'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip any and "a"'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip any and "a"'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip any and "a"'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any and 1'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip any and 1'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip any and 1'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip any and 1'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip any and 1'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any and 1.5'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip any and 1.5'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip any and 1.5'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip any and 1.5'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip any and 1.5'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip any and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip any and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} zip any and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip any and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip any and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip any and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} zip any and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip any and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip any and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip any and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip any and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip any and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any and nan'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip any and nan'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip any and nan'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip any and nan'), False)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip any and nan'), False)
        # empty
        self.assertEqual(evaluate(DummyPath(), '{} zip any and true'), False)

    def test_must_apply_and_seq_vs_single_using_zip_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all and true'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip all and true'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip all and true'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip all and true'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip all and true'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all and "a"'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip all and "a"'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip all and "a"'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip all and "a"'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip all and "a"'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all and 1'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip all and 1'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip all and 1'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip all and 1'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip all and 1'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all and 1.5'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip all and 1.5'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip all and 1.5'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip all and 1.5'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip all and 1.5'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip all and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip all and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} zip all and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip all and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip all and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip all and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} zip all and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip all and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip all and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip all and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip all and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip all and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all and nan'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip all and nan'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip all and nan'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip all and nan'), False)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip all and nan'), False)
        # empty
        self.assertEqual(evaluate(DummyPath(), '{} zip all and true'), True)

    def test_must_apply_and_seq_vs_single_using_product_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence and true'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} product sequence and true'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product sequence and true'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product sequence and true'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product sequence and true'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence and "a"'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} product sequence and "a"'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product sequence and "a"'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product sequence and "a"'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product sequence and "a"'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence and 1'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} product sequence and 1'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product sequence and 1'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product sequence and 1'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product sequence and 1'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence and 1.5'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} product sequence and 1.5'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product sequence and 1.5'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product sequence and 1.5'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product sequence and 1.5'), [False, False, False])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence and false'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, false} product sequence and false'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product sequence and false'), [False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} product sequence and false'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product sequence and false'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence and ""'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, false} product sequence and ""'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product sequence and ""'), [False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} product sequence and ""'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product sequence and ""'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence and 0'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, false} product sequence and 0'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product sequence and 0'), [False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product sequence and 0'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product sequence and 0'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence and nan'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, false} product sequence and nan'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product sequence and nan'), [False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product sequence and nan'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product sequence and nan'), [False, False, False])
        # empty
        self.assertEqual(evaluate(DummyPath(), '{} product sequence and true'), [])

    def test_must_apply_and_seq_vs_single_using_product_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any and true'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, false} product any and true'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product any and true'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product any and true'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product any and true'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any and "a"'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, false} product any and "a"'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product any and "a"'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product any and "a"'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product any and "a"'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any and 1'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, false} product any and 1'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product any and 1'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product any and 1'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product any and 1'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any and 1.5'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, false} product any and 1.5'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product any and 1.5'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product any and 1.5'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product any and 1.5'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, false} product any and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product any and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} product any and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product any and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, false} product any and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product any and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} product any and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product any and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, false} product any and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product any and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product any and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product any and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any and nan'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, false} product any and nan'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product any and nan'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product any and nan'), False)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product any and nan'), False)
        # empty
        self.assertEqual(evaluate(DummyPath(), '{} product any and true'), False)

    def test_must_apply_and_seq_vs_single_using_product_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all and true'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, false} product all and true'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product all and true'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product all and true'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product all and true'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all and "a"'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, false} product all and "a"'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product all and "a"'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product all and "a"'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product all and "a"'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all and 1'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, false} product all and 1'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product all and 1'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product all and 1'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product all and 1'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all and 1.5'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, false} product all and 1.5'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product all and 1.5'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product all and 1.5'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product all and 1.5'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, false} product all and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product all and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} product all and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product all and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, false} product all and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product all and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} product all and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product all and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, false} product all and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product all and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product all and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product all and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all and nan'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, false} product all and nan'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product all and nan'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product all and nan'), False)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product all and nan'), False)
        # empty
        self.assertEqual(evaluate(DummyPath(), '{} product all and true'), True)

    def test_must_apply_and_seq_vs_single(self):  # equiv to product any
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} and true'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, false} and true'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} and true'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} and true'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} and true'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} and "a"'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, false} and "a"'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} and "a"'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} and "a"'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} and "a"'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} and 1'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, false} and 1'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} and 1'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} and 1'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} and 1'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} and 1.5'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, false} and 1.5'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} and 1.5'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} and 1.5'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} and 1.5'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{true, true} and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, false} and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} and false'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, false} and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} and ""'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, false} and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} and 0'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, true} and nan'), False)
        self.assertEqual(evaluate(DummyPath(), '{true, false} and nan'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} and nan'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} and nan'), False)
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} and nan'), False)
        # empty
        self.assertEqual(evaluate(DummyPath(), '{} and true'), False)
        
    def test_must_apply_and_seq_vs_seq_using_zip_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence and {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence and {true, false}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence and {1, nan, "s", ""}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence and {1, "s", true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence and {0, nan, ""}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip sequence and {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip sequence and {true, false}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip sequence and {1, nan, "s", ""}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip sequence and {1, "s", true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip sequence and {0, nan, ""}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip sequence and {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip sequence and {true, false}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip sequence and {1, nan, "s", ""}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip sequence and {1, "s", true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip sequence and {0, nan, ""}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip sequence and {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip sequence and {true, false}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip sequence and {1, nan, "s", ""}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip sequence and {1, "s", true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip sequence and {0, nan, ""}'), [False, False])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip sequence and {true, true}'), [False, True])
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip sequence and {true, false}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip sequence and {1, nan, "s", ""}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip sequence and {1, "s", False}'), [False, True])
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip sequence and {0, nan, ""}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip sequence and {true, true}'), [False, True])
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip sequence and {true, false}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip sequence and {1, nan, "s", ""}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip sequence and {1, "s", False}'), [False, True])
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip sequence and {0, nan, ""}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip sequence and {true, true}'), [False, True])
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip sequence and {true, false}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip sequence and {1, nan, "s", ""}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip sequence and {1, "s", true}'), [False, True])
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip sequence and {0, nan, ""}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip sequence and {true, true}'), [False, True])
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip sequence and {true, false}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip sequence and {1, nan, "s", ""}'), [False, False])
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip sequence and {1, "s", true}'), [False, True])
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip sequence and {0, nan, ""}'), [False, False])
        # empty
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence and {}'), [])
        
    def test_must_apply_and_seq_vs_seq_using_zip_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any and {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any and {true, false}'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any and {1, nan, "s", ""}'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any and {1, "s", true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any and {0, nan, ""}'), any([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip any and {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip any and {true, false}'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip any and {1, nan, "s", ""}'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip any and {1, "s", true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip any and {0, nan, ""}'), any([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip any and {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip any and {true, false}'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip any and {1, nan, "s", ""}'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip any and {1, "s", true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip any and {0, nan, ""}'), any([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip any and {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip any and {true, false}'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip any and {1, nan, "s", ""}'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip any and {1, "s", true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip any and {0, nan, ""}'), any([False, False]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip any and {true, true}'), any([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip any and {true, false}'), any([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip any and {1, nan, "s", ""}'), any([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip any and {1, "s", False}'), any([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip any and {0, nan, ""}'), any([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip any and {true, true}'), any([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip any and {true, false}'), any([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip any and {1, nan, "s", ""}'), any([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip any and {1, "s", False}'), any([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip any and {0, nan, ""}'), any([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip any and {true, true}'), any([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip any and {true, false}'), any([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip any and {1, nan, "s", ""}'), any([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip any and {1, "s", true}'), any([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip any and {0, nan, ""}'), any([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip any and {true, true}'), any([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip any and {true, false}'), any([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip any and {1, nan, "s", ""}'), any([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip any and {1, "s", true}'), any([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip any and {0, nan, ""}'), any([False, False]))
        # empty
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any and {}'), any([]))

    def test_must_apply_and_seq_vs_seq_using_zip_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all and {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all and {true, false}'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all and {1, nan, "s", ""}'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all and {1, "s", true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all and {0, nan, ""}'), all([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip all and {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip all and {true, false}'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip all and {1, nan, "s", ""}'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip all and {1, "s", true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip all and {0, nan, ""}'), all([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip all and {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip all and {true, false}'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip all and {1, nan, "s", ""}'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip all and {1, "s", true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip all and {0, nan, ""}'), all([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip all and {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip all and {true, false}'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip all and {1, nan, "s", ""}'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip all and {1, "s", true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip all and {0, nan, ""}'), all([False, False]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip all and {true, true}'), all([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip all and {true, false}'), all([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip all and {1, nan, "s", ""}'), all([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip all and {1, "s", False}'), all([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip all and {0, nan, ""}'), all([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip all and {true, true}'), all([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip all and {true, false}'), all([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip all and {1, nan, "s", ""}'), all([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip all and {1, "s", False}'), all([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip all and {0, nan, ""}'), all([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip all and {true, true}'), all([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip all and {true, false}'), all([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip all and {1, nan, "s", ""}'), all([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip all and {1, "s", true}'), all([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip all and {0, nan, ""}'), all([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip all and {true, true}'), all([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip all and {true, false}'), all([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip all and {1, nan, "s", ""}'), all([False, False]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip all and {1, "s", true}'), all([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip all and {0, nan, ""}'), all([False, False]))
        # empty
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all and {}'), all([]))

    def test_must_apply_and_seq_vs_seq_product_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence and {true, true}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence and {true, false}'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence and {1, nan, "s", ""}'), [True, False, True, False, True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence and {1, "s", true}'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence and {0, nan, ""}'), [False, False, False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product sequence and {true, true}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product sequence and {true, false}'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product sequence and {1, nan, "s", ""}'), [True, False, True, False, True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product sequence and {1, "s", true}'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product sequence and {0, nan, ""}'), [False, False, False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{1, true} product sequence and {true, true}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, true} product sequence and {true, false}'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, true} product sequence and {1, nan, "s", ""}'), [True, False, True, False, True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, true} product sequence and {1, "s", true}'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, true} product sequence and {0, nan, ""}'), [False, False, False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product sequence and {true, true}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product sequence and {true, false}'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product sequence and {1, nan, "s", ""}'), [True, False, True, False, True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product sequence and {1, "s", true}'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product sequence and {0, nan, ""}'), [False, False, False, False, False, False])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{false, true} product sequence and {true, true}'), [False, False, True, True])
        self.assertEqual(evaluate(DummyPath(), '{false, true} product sequence and {true, false}'), [False, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{false, true} product sequence and {1, nan, "s", ""}'), [False, False, False, False, True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{false, true} product sequence and {1, "s", False}'), [False, False, False, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{false, true} product sequence and {0, nan, ""}'), [False, False, False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{"", true} product sequence and {true, true}'), [False, False, True, True])
        self.assertEqual(evaluate(DummyPath(), '{"", true} product sequence and {true, false}'), [False, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{"", true} product sequence and {1, nan, "s", ""}'), [False, False, False, False, True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{"", true} product sequence and {1, "s", False}'), [False, False, False, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{"", true} product sequence and {0, nan, ""}'), [False, False, False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{0, true} product sequence and {true, true}'), [False, False, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, true} product sequence and {true, false}'), [False, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{0, true} product sequence and {1, nan, "s", ""}'), [False, False, False, False, True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{0, true} product sequence and {1, "s", true}'), [False, False, False, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, true} product sequence and {0, nan, ""}'), [False, False, False, False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product sequence and {true, true}'), [False, False, True, True])
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product sequence and {true, false}'), [False, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product sequence and {1, nan, "s", ""}'), [False, False, False, False, True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product sequence and {1, "s", true}'), [False, False, False, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product sequence and {0, nan, ""}'), [False, False, False, False, False, False])
        # empty
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence and {}'), [])

    def test_must_apply_and_seq_vs_seq_product_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any and {true, true}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any and {true, false}'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any and {1, nan, "s", ""}'), any([True, False, True, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any and {1, "s", true}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any and {0, nan, ""}'), any([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product any and {true, true}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product any and {true, false}'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product any and {1, nan, "s", ""}'), any([True, False, True, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product any and {1, "s", true}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product any and {0, nan, ""}'), any([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} product any and {true, true}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} product any and {true, false}'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} product any and {1, nan, "s", ""}'), any([True, False, True, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} product any and {1, "s", true}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} product any and {0, nan, ""}'), any([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product any and {true, true}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product any and {true, false}'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product any and {1, nan, "s", ""}'), any([True, False, True, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product any and {1, "s", true}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product any and {0, nan, ""}'), any([False, False, False, False, False, False]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{false, true} product any and {true, true}'), any([False, False, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} product any and {true, false}'), any([False, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} product any and {1, nan, "s", ""}'), any([False, False, False, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} product any and {1, "s", False}'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} product any and {0, nan, ""}'), any([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} product any and {true, true}'), any([False, False, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} product any and {true, false}'), any([False, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} product any and {1, nan, "s", ""}'), any([False, False, False, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} product any and {1, "s", False}'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} product any and {0, nan, ""}'), any([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} product any and {true, true}'), any([False, False, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} product any and {true, false}'), any([False, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} product any and {1, nan, "s", ""}'), any([False, False, False, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} product any and {1, "s", true}'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} product any and {0, nan, ""}'), any([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product any and {true, true}'), any([False, False, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product any and {true, false}'), any([False, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product any and {1, nan, "s", ""}'), any([False, False, False, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product any and {1, "s", true}'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product any and {0, nan, ""}'), any([False, False, False, False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any and {}'), any([]))

    def test_must_apply_and_seq_vs_seq_product_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all and {true, true}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all and {true, false}'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all and {1, nan, "s", ""}'), all([True, False, True, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all and {1, "s", true}'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all and {0, nan, ""}'), all([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product all and {true, true}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product all and {true, false}'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product all and {1, nan, "s", ""}'), all([True, False, True, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product all and {1, "s", true}'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product all and {0, nan, ""}'), all([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} product all and {true, true}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} product all and {true, false}'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} product all and {1, nan, "s", ""}'), all([True, False, True, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} product all and {1, "s", true}'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} product all and {0, nan, ""}'), all([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product all and {true, true}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product all and {true, false}'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product all and {1, nan, "s", ""}'), all([True, False, True, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product all and {1, "s", true}'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product all and {0, nan, ""}'), all([False, False, False, False, False, False]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{false, true} product all and {true, true}'), all([False, False, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} product all and {true, false}'), all([False, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} product all and {1, nan, "s", ""}'), all([False, False, False, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} product all and {1, "s", False}'), all([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} product all and {0, nan, ""}'), all([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} product all and {true, true}'), all([False, False, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} product all and {true, false}'), all([False, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} product all and {1, nan, "s", ""}'), all([False, False, False, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} product all and {1, "s", False}'), all([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} product all and {0, nan, ""}'), all([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} product all and {true, true}'), all([False, False, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} product all and {true, false}'), all([False, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} product all and {1, nan, "s", ""}'), all([False, False, False, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} product all and {1, "s", true}'), all([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} product all and {0, nan, ""}'), all([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product all and {true, true}'), all([False, False, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product all and {true, false}'), all([False, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product all and {1, nan, "s", ""}'), all([False, False, False, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product all and {1, "s", true}'), all([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product all and {0, nan, ""}'), all([False, False, False, False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all and {}'), all([]))

    def test_must_apply_and_seq_vs_seq(self):  # equiv to product any
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, true} and {true, false}'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, true} and {1, nan, "s", ""}'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, true} and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), '{true, true} and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '{"a", true} and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '{"a", true} and {true, false}'), True)
        self.assertEqual(evaluate(DummyPath(), '{"a", true} and {1, nan, "s", ""}'), True)
        self.assertEqual(evaluate(DummyPath(), '{"a", true} and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), '{"a", true} and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '{1, true} and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, true} and {true, false}'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, true} and {1, nan, "s", ""}'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, true} and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), '{1, true} and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} and {true, false}'), True)
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} and {1, nan, "s", ""}'), True)
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} and {0, nan, ""}'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{false, true} and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '{false, true} and {true, false}'), True)
        self.assertEqual(evaluate(DummyPath(), '{false, true} and {1, nan, "s", ""}'), True)
        self.assertEqual(evaluate(DummyPath(), '{false, true} and {1, "s", False}'), True)
        self.assertEqual(evaluate(DummyPath(), '{false, true} and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '{"", true} and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '{"", true} and {true, false}'), True)
        self.assertEqual(evaluate(DummyPath(), '{"", true} and {1, nan, "s", ""}'), True)
        self.assertEqual(evaluate(DummyPath(), '{"", true} and {1, "s", False}'), True)
        self.assertEqual(evaluate(DummyPath(), '{"", true} and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '{0, true} and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, true} and {true, false}'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, true} and {1, nan, "s", ""}'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, true} and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), '{0, true} and {0, nan, ""}'), False)
        self.assertEqual(evaluate(DummyPath(), '{nan, true} and {true, true}'), True)
        self.assertEqual(evaluate(DummyPath(), '{nan, true} and {true, false}'), True)
        self.assertEqual(evaluate(DummyPath(), '{nan, true} and {1, nan, "s", ""}'), True)
        self.assertEqual(evaluate(DummyPath(), '{nan, true} and {1, "s", true}'), True)
        self.assertEqual(evaluate(DummyPath(), '{nan, true} and {0, nan, ""}'), False)
        # empty
        self.assertEqual(evaluate(DummyPath(), '{true, true} and {}'), False)


if __name__ == '__main__':
    unittest.main()
