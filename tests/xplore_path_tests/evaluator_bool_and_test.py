import unittest

from xplore_path.evaluator import Evaluator
from xplore_path.nodes.dummy.dummy_node import DummyNode
from xplore_path.nodes.python_object.python_object_node import PythonObjectNode


def evaluate(root, expr, variables = None):
    return Evaluator(variables).evaluate(root, expr)


class EvaluatorTest(unittest.TestCase):
    def test_must_apply_and_single_vs_single(self):
        self.assertEqual(evaluate(DummyNode(), 'true and true'), True)
        self.assertEqual(evaluate(DummyNode(), 'true and false'), False)
        self.assertEqual(evaluate(DummyNode(), 'false and true'), False)
        self.assertEqual(evaluate(DummyNode(), 'false and false'), False)

        self.assertEqual(evaluate(DummyNode(), 'a and true'), True)  # non-empty string coerces to true
        self.assertEqual(evaluate(DummyNode(), 'a and false'), False)  # non-empty string coerces to true
        self.assertEqual(evaluate(DummyNode(), 'true and a'), True)  # non-empty string coerces to true
        self.assertEqual(evaluate(DummyNode(), 'false and a'), False)  # non-empty string coerces to true

        self.assertEqual(evaluate(DummyNode(), '"" and true'), False)  # empty string coerces to false
        self.assertEqual(evaluate(DummyNode(), '"" and false'), False)  # empty string coerces to false
        self.assertEqual(evaluate(DummyNode(), 'true and ""'), False)  # empty string coerces to false
        self.assertEqual(evaluate(DummyNode(), 'false and ""'), False)  # empty string coerces to false

        self.assertEqual(evaluate(DummyNode(), '0 and true'), False)  # 0 coerces to false
        self.assertEqual(evaluate(DummyNode(), '0 and false'), False)  # 0 coerces to false
        self.assertEqual(evaluate(DummyNode(), 'true and 0'), False)  # 0 coerces to false
        self.assertEqual(evaluate(DummyNode(), 'false and 0'), False)  # 0 coerces to false

        self.assertEqual(evaluate(DummyNode(), 'nan and true'), False)  # nan coerces to false
        self.assertEqual(evaluate(DummyNode(), 'nan and false'), False)  # nan coerces to false
        self.assertEqual(evaluate(DummyNode(), 'true and nan'), False)  # nan coerces to false
        self.assertEqual(evaluate(DummyNode(), 'false and nan'), False)  # nan coerces to false

        self.assertEqual(evaluate(DummyNode(), '1 and true'), True)  # non-0 coerces to true
        self.assertEqual(evaluate(DummyNode(), '1 and false'), False)  # non-0 coerces to true
        self.assertEqual(evaluate(DummyNode(), 'true and 1'), True)  # non-0 coerces to true
        self.assertEqual(evaluate(DummyNode(), 'false and 1'), False)  # non-0 coerces to true

        self.assertEqual(evaluate(DummyNode(), '-1 and true'), True)  # non-0 coerces to true (even if its negative)
        self.assertEqual(evaluate(DummyNode(), '-1 and false'), False)  # non-0 coerces to true (even if its negative)
        self.assertEqual(evaluate(DummyNode(), 'true and -1'), True)  # non-0 coerces to true (even if its negative)
        self.assertEqual(evaluate(DummyNode(), 'false and -1'), False)  # non-0 coerces to true (even if its negative)

    def test_must_apply_and_single_vs_seq_using_zip_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), 'true expand zip sequence and (true, true)'), [True])
        self.assertEqual(evaluate(DummyNode(), 'true expand zip sequence and (true, false)'), [True])
        self.assertEqual(evaluate(DummyNode(), 'true expand zip sequence and (1, nan, "s", "")'), [True])
        self.assertEqual(evaluate(DummyNode(), 'true expand zip sequence and (1, "s", true)'), [True])
        self.assertEqual(evaluate(DummyNode(), 'true expand zip sequence and (0, nan, "")'), [False])
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip sequence and (true, true)'), [True])
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip sequence and (true, false)'), [True])
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip sequence and (1, nan, "s", "")'), [True])
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip sequence and (1, "s", true)'), [True])
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip sequence and (0, nan, "")'), [False])
        self.assertEqual(evaluate(DummyNode(), '1 expand zip sequence and (true, true)'), [True])
        self.assertEqual(evaluate(DummyNode(), '1 expand zip sequence and (true, false)'), [True])
        self.assertEqual(evaluate(DummyNode(), '1 expand zip sequence and (1, nan, "s", "")'), [True])
        self.assertEqual(evaluate(DummyNode(), '1 expand zip sequence and (1, "s", true)'), [True])
        self.assertEqual(evaluate(DummyNode(), '1 expand zip sequence and (0, nan, "")'), [False])
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip sequence and (true, true)'), [True])
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip sequence and (true, false)'), [True])
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip sequence and (1, nan, "s", "")'), [True])
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip sequence and (1, "s", true)'), [True])
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip sequence and (0, nan, "")'), [False])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), 'false expand zip sequence and (true, true)'), [False])
        self.assertEqual(evaluate(DummyNode(), 'false expand zip sequence and (true, false)'), [False])
        self.assertEqual(evaluate(DummyNode(), 'false expand zip sequence and (1, nan, "s", "")'), [False])
        self.assertEqual(evaluate(DummyNode(), 'false expand zip sequence and (1, "s", False)'), [False])
        self.assertEqual(evaluate(DummyNode(), 'false expand zip sequence and (0, nan, "")'), [False])
        self.assertEqual(evaluate(DummyNode(), '"" expand zip sequence and (true, true)'), [False])
        self.assertEqual(evaluate(DummyNode(), '"" expand zip sequence and (true, false)'), [False])
        self.assertEqual(evaluate(DummyNode(), '"" expand zip sequence and (1, nan, "s", "")'), [False])
        self.assertEqual(evaluate(DummyNode(), '"" expand zip sequence and (1, "s", False)'), [False])
        self.assertEqual(evaluate(DummyNode(), '"" expand zip sequence and (0, nan, "")'), [False])
        self.assertEqual(evaluate(DummyNode(), '0 expand zip sequence and (true, true)'), [False])
        self.assertEqual(evaluate(DummyNode(), '0 expand zip sequence and (true, false)'), [False])
        self.assertEqual(evaluate(DummyNode(), '0 expand zip sequence and (1, nan, "s", "")'), [False])
        self.assertEqual(evaluate(DummyNode(), '0 expand zip sequence and (1, "s", true)'), [False])
        self.assertEqual(evaluate(DummyNode(), '0 expand zip sequence and (0, nan, "")'), [False])
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip sequence and (true, true)'), [False])
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip sequence and (true, false)'), [False])
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip sequence and (1, nan, "s", "")'), [False])
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip sequence and (1, "s", true)'), [False])
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip sequence and (0, nan, "")'), [False])
        # empty
        self.assertEqual(evaluate(DummyNode(), 'true expand zip sequence and ()'), [])

    def test_must_apply_and_single_vs_seq_using_zip_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), 'true expand zip any and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), 'true expand zip any and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), 'true expand zip any and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), 'true expand zip any and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), 'true expand zip any and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip any and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip any and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip any and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip any and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip any and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '1 expand zip any and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '1 expand zip any and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), '1 expand zip any and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), '1 expand zip any and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), '1 expand zip any and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip any and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip any and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip any and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip any and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip any and (0, nan, "")'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), 'false expand zip any and (true, true)'), False)
        self.assertEqual(evaluate(DummyNode(), 'false expand zip any and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), 'false expand zip any and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), 'false expand zip any and (1, "s", False)'), False)
        self.assertEqual(evaluate(DummyNode(), 'false expand zip any and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand zip any and (true, true)'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand zip any and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand zip any and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand zip any and (1, "s", False)'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand zip any and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand zip any and (true, true)'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand zip any and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand zip any and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand zip any and (1, "s", true)'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand zip any and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip any and (true, true)'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip any and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip any and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip any and (1, "s", true)'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip any and (0, nan, "")'), False)
        # empty
        self.assertEqual(evaluate(DummyNode(), 'true expand zip any and ()'), False)
    
    def test_must_apply_and_single_vs_seq_using_zip_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), 'true expand zip all and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), 'true expand zip all and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), 'true expand zip all and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), 'true expand zip all and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), 'true expand zip all and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip all and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip all and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip all and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip all and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip all and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '1 expand zip all and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '1 expand zip all and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), '1 expand zip all and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), '1 expand zip all and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), '1 expand zip all and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip all and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip all and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip all and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip all and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip all and (0, nan, "")'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), 'false expand zip all and (true, true)'), False)
        self.assertEqual(evaluate(DummyNode(), 'false expand zip all and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), 'false expand zip all and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), 'false expand zip all and (1, "s", False)'), False)
        self.assertEqual(evaluate(DummyNode(), 'false expand zip all and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand zip all and (true, true)'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand zip all and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand zip all and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand zip all and (1, "s", False)'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand zip all and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand zip all and (true, true)'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand zip all and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand zip all and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand zip all and (1, "s", true)'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand zip all and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip all and (true, true)'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip all and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip all and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip all and (1, "s", true)'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip all and (0, nan, "")'), False)
        # empty
        self.assertEqual(evaluate(DummyNode(), 'true expand zip all and ()'), True)

    def test_must_apply_and_single_vs_seq_using_product_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), 'true expand product sequence and (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), 'true expand product sequence and (true, false)'), [True, False])
        self.assertEqual(evaluate(DummyNode(), 'true expand product sequence and (1, nan, "s", "")'), [True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), 'true expand product sequence and (1, "s", true)'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), 'true expand product sequence and (0, nan, "")'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '"a" expand product sequence and (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '"a" expand product sequence and (true, false)'), [True, False])
        self.assertEqual(evaluate(DummyNode(), '"a" expand product sequence and (1, nan, "s", "")'), [True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '"a" expand product sequence and (1, "s", true)'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '"a" expand product sequence and (0, nan, "")'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '1 expand product sequence and (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '1 expand product sequence and (true, false)'), [True, False])
        self.assertEqual(evaluate(DummyNode(), '1 expand product sequence and (1, nan, "s", "")'), [True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '1 expand product sequence and (1, "s", true)'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '1 expand product sequence and (0, nan, "")'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product sequence and (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product sequence and (true, false)'), [True, False])
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product sequence and (1, nan, "s", "")'), [True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product sequence and (1, "s", true)'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product sequence and (0, nan, "")'), [False, False, False])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), 'false expand product sequence and (true, true)'), [False, False])
        self.assertEqual(evaluate(DummyNode(), 'false expand product sequence and (true, false)'), [False, False])
        self.assertEqual(evaluate(DummyNode(), 'false expand product sequence and (1, nan, "s", "")'), [False, False, False, False])
        self.assertEqual(evaluate(DummyNode(), 'false expand product sequence and (1, "s", False)'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), 'false expand product sequence and (0, nan, "")'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '"" expand product sequence and (true, true)'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '"" expand product sequence and (true, false)'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '"" expand product sequence and (1, nan, "s", "")'), [False, False, False, False])
        self.assertEqual(evaluate(DummyNode(), '"" expand product sequence and (1, "s", False)'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '"" expand product sequence and (0, nan, "")'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '0 expand product sequence and (true, true)'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '0 expand product sequence and (true, false)'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '0 expand product sequence and (1, nan, "s", "")'), [False, False, False, False])
        self.assertEqual(evaluate(DummyNode(), '0 expand product sequence and (1, "s", true)'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '0 expand product sequence and (0, nan, "")'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), 'nan expand product sequence and (true, true)'), [False, False])
        self.assertEqual(evaluate(DummyNode(), 'nan expand product sequence and (true, false)'), [False, False])
        self.assertEqual(evaluate(DummyNode(), 'nan expand product sequence and (1, nan, "s", "")'), [False, False, False, False])
        self.assertEqual(evaluate(DummyNode(), 'nan expand product sequence and (1, "s", true)'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), 'nan expand product sequence and (0, nan, "")'), [False, False, False])
        # empty
        self.assertEqual(evaluate(DummyNode(), 'true expand product sequence and ()'), [])

    def test_must_apply_and_single_vs_seq_using_product_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), 'true expand product any and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), 'true expand product any and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), 'true expand product any and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), 'true expand product any and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), 'true expand product any and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '"a" expand product any and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '"a" expand product any and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), '"a" expand product any and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), '"a" expand product any and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), '"a" expand product any and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '1 expand product any and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '1 expand product any and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), '1 expand product any and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), '1 expand product any and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), '1 expand product any and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product any and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product any and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product any and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product any and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product any and (0, nan, "")'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), 'false expand product any and (true, true)'), False)
        self.assertEqual(evaluate(DummyNode(), 'false expand product any and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), 'false expand product any and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), 'false expand product any and (1, "s", False)'), False)
        self.assertEqual(evaluate(DummyNode(), 'false expand product any and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand product any and (true, true)'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand product any and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand product any and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand product any and (1, "s", False)'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand product any and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand product any and (true, true)'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand product any and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand product any and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand product any and (1, "s", true)'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand product any and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand product any and (true, true)'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand product any and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand product any and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand product any and (1, "s", true)'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand product any and (0, nan, "")'), False)
        # empty
        self.assertEqual(evaluate(DummyNode(), 'true expand product any and ()'), False)

    def test_must_apply_and_single_vs_seq_using_product_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), 'true expand product all and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), 'true expand product all and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), 'true expand product all and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), 'true expand product all and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), 'true expand product all and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '"a" expand product all and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '"a" expand product all and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), '"a" expand product all and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), '"a" expand product all and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), '"a" expand product all and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '1 expand product all and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '1 expand product all and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), '1 expand product all and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), '1 expand product all and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), '1 expand product all and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product all and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product all and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product all and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product all and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product all and (0, nan, "")'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), 'false expand product all and (true, true)'), False)
        self.assertEqual(evaluate(DummyNode(), 'false expand product all and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), 'false expand product all and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), 'false expand product all and (1, "s", False)'), False)
        self.assertEqual(evaluate(DummyNode(), 'false expand product all and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand product all and (true, true)'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand product all and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand product all and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand product all and (1, "s", False)'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand product all and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand product all and (true, true)'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand product all and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand product all and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand product all and (1, "s", true)'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand product all and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand product all and (true, true)'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand product all and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand product all and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand product all and (1, "s", true)'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand product all and (0, nan, "")'), False)
        # empty
        self.assertEqual(evaluate(DummyNode(), 'true expand product all and ()'), True)
        
    def test_must_apply_and_single_vs_seq(self):  # equiv to expand product any
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), 'true expand and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), 'true expand and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), 'true expand and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), 'true expand and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), 'true expand and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '"a" expand and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '"a" expand and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), '"a" expand and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), '"a" expand and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), '"a" expand and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '1 expand and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '1 expand and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), '1 expand and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), '1 expand and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), '1 expand and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), '1.5 expand and (0, nan, "")'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), 'false expand and (true, true)'), False)
        self.assertEqual(evaluate(DummyNode(), 'false expand and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), 'false expand and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), 'false expand and (1, "s", False)'), False)
        self.assertEqual(evaluate(DummyNode(), 'false expand and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand and (true, true)'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand and (1, "s", False)'), False)
        self.assertEqual(evaluate(DummyNode(), '"" expand and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand and (true, true)'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand and (1, "s", true)'), False)
        self.assertEqual(evaluate(DummyNode(), '0 expand and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand and (true, true)'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand and (true, false)'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand and (1, nan, "s", "")'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand and (1, "s", true)'), False)
        self.assertEqual(evaluate(DummyNode(), 'nan expand and (0, nan, "")'), False)
        # empty
        self.assertEqual(evaluate(DummyNode(), 'true expand and ()'), False)

    def test_must_apply_and_seq_vs_single_using_zip_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence and true'), [True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip sequence and true'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip sequence and true'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip sequence and true'), [True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip sequence and true'), [False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence and "a"'), [True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip sequence and "a"'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip sequence and "a"'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip sequence and "a"'), [True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip sequence and "a"'), [False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence and 1'), [True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip sequence and 1'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip sequence and 1'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip sequence and 1'), [True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip sequence and 1'), [False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence and 1.5'), [True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip sequence and 1.5'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip sequence and 1.5'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip sequence and 1.5'), [True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip sequence and 1.5'), [False])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence and false'), [False])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip sequence and false'), [False])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip sequence and false'), [False])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand zip sequence and false'), [False])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip sequence and false'), [False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence and ""'), [False])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip sequence and ""'), [False])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip sequence and ""'), [False])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand zip sequence and ""'), [False])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip sequence and ""'), [False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence and 0'), [False])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip sequence and 0'), [False])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip sequence and 0'), [False])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip sequence and 0'), [False])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip sequence and 0'), [False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence and nan'), [False])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip sequence and nan'), [False])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip sequence and nan'), [False])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip sequence and nan'), [False])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip sequence and nan'), [False])
        # empty
        self.assertEqual(evaluate(DummyNode(), '() expand zip sequence and true'), [])

    def test_must_apply_and_seq_vs_single_using_zip_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any and true'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip any and true'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip any and true'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip any and true'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip any and true'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any and "a"'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip any and "a"'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip any and "a"'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip any and "a"'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip any and "a"'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any and 1'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip any and 1'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip any and 1'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip any and 1'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip any and 1'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any and 1.5'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip any and 1.5'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip any and 1.5'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip any and 1.5'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip any and 1.5'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip any and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip any and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand zip any and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip any and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip any and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip any and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand zip any and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip any and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip any and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip any and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip any and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip any and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any and nan'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip any and nan'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip any and nan'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip any and nan'), False)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip any and nan'), False)
        # empty
        self.assertEqual(evaluate(DummyNode(), '() expand zip any and true'), False)

    def test_must_apply_and_seq_vs_single_using_zip_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all and true'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip all and true'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip all and true'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip all and true'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip all and true'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all and "a"'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip all and "a"'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip all and "a"'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip all and "a"'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip all and "a"'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all and 1'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip all and 1'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip all and 1'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip all and 1'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip all and 1'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all and 1.5'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip all and 1.5'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip all and 1.5'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip all and 1.5'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip all and 1.5'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip all and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip all and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand zip all and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip all and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip all and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip all and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand zip all and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip all and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip all and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip all and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip all and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip all and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all and nan'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip all and nan'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip all and nan'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip all and nan'), False)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip all and nan'), False)
        # empty
        self.assertEqual(evaluate(DummyNode(), '() expand zip all and true'), True)

    def test_must_apply_and_seq_vs_single_using_product_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence and true'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product sequence and true'), [True, False])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product sequence and true'), [True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product sequence and true'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product sequence and true'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence and "a"'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product sequence and "a"'), [True, False])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product sequence and "a"'), [True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product sequence and "a"'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product sequence and "a"'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence and 1'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product sequence and 1'), [True, False])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product sequence and 1'), [True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product sequence and 1'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product sequence and 1'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence and 1.5'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product sequence and 1.5'), [True, False])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product sequence and 1.5'), [True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product sequence and 1.5'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product sequence and 1.5'), [False, False, False])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence and false'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product sequence and false'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product sequence and false'), [False, False, False, False])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand product sequence and false'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product sequence and false'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence and ""'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product sequence and ""'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product sequence and ""'), [False, False, False, False])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand product sequence and ""'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product sequence and ""'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence and 0'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product sequence and 0'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product sequence and 0'), [False, False, False, False])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product sequence and 0'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product sequence and 0'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence and nan'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product sequence and nan'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product sequence and nan'), [False, False, False, False])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product sequence and nan'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product sequence and nan'), [False, False, False])
        # empty
        self.assertEqual(evaluate(DummyNode(), '() expand product sequence and true'), [])

    def test_must_apply_and_seq_vs_single_using_product_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any and true'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product any and true'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product any and true'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product any and true'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product any and true'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any and "a"'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product any and "a"'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product any and "a"'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product any and "a"'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product any and "a"'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any and 1'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product any and 1'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product any and 1'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product any and 1'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product any and 1'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any and 1.5'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product any and 1.5'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product any and 1.5'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product any and 1.5'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product any and 1.5'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product any and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product any and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand product any and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product any and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product any and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product any and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand product any and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product any and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product any and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product any and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product any and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product any and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any and nan'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product any and nan'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product any and nan'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product any and nan'), False)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product any and nan'), False)
        # empty
        self.assertEqual(evaluate(DummyNode(), '() expand product any and true'), False)

    def test_must_apply_and_seq_vs_single_using_product_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all and true'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product all and true'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product all and true'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product all and true'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product all and true'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all and "a"'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product all and "a"'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product all and "a"'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product all and "a"'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product all and "a"'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all and 1'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product all and 1'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product all and 1'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product all and 1'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product all and 1'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all and 1.5'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product all and 1.5'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product all and 1.5'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product all and 1.5'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product all and 1.5'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product all and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product all and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand product all and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product all and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product all and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product all and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand product all and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product all and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product all and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product all and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product all and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product all and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all and nan'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product all and nan'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product all and nan'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product all and nan'), False)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product all and nan'), False)
        # empty
        self.assertEqual(evaluate(DummyNode(), '() expand product all and true'), True)

    def test_must_apply_and_seq_vs_single(self):  # equiv to expand product any
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand and true'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand and true'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand and true'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand and true'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand and true'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand and "a"'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand and "a"'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand and "a"'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand and "a"'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand and "a"'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand and 1'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand and 1'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand and 1'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand and 1'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand and 1'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand and 1.5'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand and 1.5'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand and 1.5'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand and 1.5'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand and 1.5'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand and false'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand and ""'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand and 0'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand and nan'), False)
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand and nan'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand and nan'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand and nan'), False)
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand and nan'), False)
        # empty
        self.assertEqual(evaluate(DummyNode(), '() expand and true'), False)
        
    def test_must_apply_and_seq_vs_seq_using_zip_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence and (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence and (true, false)'), [True, False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence and (1, nan, "s", "")'), [True, False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence and (1, "s", true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence and (0, nan, "")'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip sequence and (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip sequence and (true, false)'), [True, False])
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip sequence and (1, nan, "s", "")'), [True, False])
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip sequence and (1, "s", true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip sequence and (0, nan, "")'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip sequence and (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip sequence and (true, false)'), [True, False])
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip sequence and (1, nan, "s", "")'), [True, False])
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip sequence and (1, "s", true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip sequence and (0, nan, "")'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip sequence and (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip sequence and (true, false)'), [True, False])
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip sequence and (1, nan, "s", "")'), [True, False])
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip sequence and (1, "s", true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip sequence and (0, nan, "")'), [False, False])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip sequence and (true, true)'), [False, True])
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip sequence and (true, false)'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip sequence and (1, nan, "s", "")'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip sequence and (1, "s", False)'), [False, True])
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip sequence and (0, nan, "")'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip sequence and (true, true)'), [False, True])
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip sequence and (true, false)'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip sequence and (1, nan, "s", "")'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip sequence and (1, "s", False)'), [False, True])
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip sequence and (0, nan, "")'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip sequence and (true, true)'), [False, True])
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip sequence and (true, false)'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip sequence and (1, nan, "s", "")'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip sequence and (1, "s", true)'), [False, True])
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip sequence and (0, nan, "")'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip sequence and (true, true)'), [False, True])
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip sequence and (true, false)'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip sequence and (1, nan, "s", "")'), [False, False])
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip sequence and (1, "s", true)'), [False, True])
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip sequence and (0, nan, "")'), [False, False])
        # empty
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence and ()'), [])
        
    def test_must_apply_and_seq_vs_seq_using_zip_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any and (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any and (true, false)'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any and (1, nan, "s", "")'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any and (1, "s", true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any and (0, nan, "")'), any([False, False]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip any and (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip any and (true, false)'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip any and (1, nan, "s", "")'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip any and (1, "s", true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip any and (0, nan, "")'), any([False, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip any and (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip any and (true, false)'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip any and (1, nan, "s", "")'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip any and (1, "s", true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip any and (0, nan, "")'), any([False, False]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip any and (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip any and (true, false)'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip any and (1, nan, "s", "")'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip any and (1, "s", true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip any and (0, nan, "")'), any([False, False]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip any and (true, true)'), any([False, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip any and (true, false)'), any([False, False]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip any and (1, nan, "s", "")'), any([False, False]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip any and (1, "s", False)'), any([False, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip any and (0, nan, "")'), any([False, False]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip any and (true, true)'), any([False, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip any and (true, false)'), any([False, False]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip any and (1, nan, "s", "")'), any([False, False]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip any and (1, "s", False)'), any([False, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip any and (0, nan, "")'), any([False, False]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip any and (true, true)'), any([False, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip any and (true, false)'), any([False, False]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip any and (1, nan, "s", "")'), any([False, False]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip any and (1, "s", true)'), any([False, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip any and (0, nan, "")'), any([False, False]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip any and (true, true)'), any([False, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip any and (true, false)'), any([False, False]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip any and (1, nan, "s", "")'), any([False, False]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip any and (1, "s", true)'), any([False, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip any and (0, nan, "")'), any([False, False]))
        # empty
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any and ()'), any([]))

    def test_must_apply_and_seq_vs_seq_using_zip_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all and (true, true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all and (true, false)'), all([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all and (1, nan, "s", "")'), all([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all and (1, "s", true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all and (0, nan, "")'), all([False, False]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip all and (true, true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip all and (true, false)'), all([True, False]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip all and (1, nan, "s", "")'), all([True, False]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip all and (1, "s", true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip all and (0, nan, "")'), all([False, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip all and (true, true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip all and (true, false)'), all([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip all and (1, nan, "s", "")'), all([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip all and (1, "s", true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip all and (0, nan, "")'), all([False, False]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip all and (true, true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip all and (true, false)'), all([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip all and (1, nan, "s", "")'), all([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip all and (1, "s", true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip all and (0, nan, "")'), all([False, False]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip all and (true, true)'), all([False, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip all and (true, false)'), all([False, False]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip all and (1, nan, "s", "")'), all([False, False]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip all and (1, "s", False)'), all([False, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip all and (0, nan, "")'), all([False, False]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip all and (true, true)'), all([False, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip all and (true, false)'), all([False, False]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip all and (1, nan, "s", "")'), all([False, False]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip all and (1, "s", False)'), all([False, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip all and (0, nan, "")'), all([False, False]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip all and (true, true)'), all([False, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip all and (true, false)'), all([False, False]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip all and (1, nan, "s", "")'), all([False, False]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip all and (1, "s", true)'), all([False, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip all and (0, nan, "")'), all([False, False]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip all and (true, true)'), all([False, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip all and (true, false)'), all([False, False]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip all and (1, nan, "s", "")'), all([False, False]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip all and (1, "s", true)'), all([False, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip all and (0, nan, "")'), all([False, False]))
        # empty
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all and ()'), all([]))

    def test_must_apply_and_seq_vs_seq_product_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence and (true, true)'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence and (true, false)'), [True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence and (1, nan, "s", "")'), [True, False, True, False, True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence and (1, "s", true)'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence and (0, nan, "")'), [False, False, False, False, False, False])
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product sequence and (true, true)'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product sequence and (true, false)'), [True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product sequence and (1, nan, "s", "")'), [True, False, True, False, True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product sequence and (1, "s", true)'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product sequence and (0, nan, "")'), [False, False, False, False, False, False])
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product sequence and (true, true)'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product sequence and (true, false)'), [True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product sequence and (1, nan, "s", "")'), [True, False, True, False, True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product sequence and (1, "s", true)'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product sequence and (0, nan, "")'), [False, False, False, False, False, False])
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product sequence and (true, true)'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product sequence and (true, false)'), [True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product sequence and (1, nan, "s", "")'), [True, False, True, False, True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product sequence and (1, "s", true)'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product sequence and (0, nan, "")'), [False, False, False, False, False, False])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product sequence and (true, true)'), [False, False, True, True])
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product sequence and (true, false)'), [False, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product sequence and (1, nan, "s", "")'), [False, False, False, False, True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product sequence and (1, "s", False)'), [False, False, False, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product sequence and (0, nan, "")'), [False, False, False, False, False, False])
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product sequence and (true, true)'), [False, False, True, True])
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product sequence and (true, false)'), [False, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product sequence and (1, nan, "s", "")'), [False, False, False, False, True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product sequence and (1, "s", False)'), [False, False, False, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product sequence and (0, nan, "")'), [False, False, False, False, False, False])
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product sequence and (true, true)'), [False, False, True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product sequence and (true, false)'), [False, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product sequence and (1, nan, "s", "")'), [False, False, False, False, True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product sequence and (1, "s", true)'), [False, False, False, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product sequence and (0, nan, "")'), [False, False, False, False, False, False])
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product sequence and (true, true)'), [False, False, True, True])
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product sequence and (true, false)'), [False, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product sequence and (1, nan, "s", "")'), [False, False, False, False, True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product sequence and (1, "s", true)'), [False, False, False, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product sequence and (0, nan, "")'), [False, False, False, False, False, False])
        # empty
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence and ()'), [])

    def test_must_apply_and_seq_vs_seq_product_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any and (true, true)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any and (true, false)'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any and (1, nan, "s", "")'), any([True, False, True, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any and (1, "s", true)'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any and (0, nan, "")'), any([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product any and (true, true)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product any and (true, false)'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product any and (1, nan, "s", "")'), any([True, False, True, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product any and (1, "s", true)'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product any and (0, nan, "")'), any([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product any and (true, true)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product any and (true, false)'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product any and (1, nan, "s", "")'), any([True, False, True, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product any and (1, "s", true)'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product any and (0, nan, "")'), any([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product any and (true, true)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product any and (true, false)'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product any and (1, nan, "s", "")'), any([True, False, True, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product any and (1, "s", true)'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product any and (0, nan, "")'), any([False, False, False, False, False, False]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product any and (true, true)'), any([False, False, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product any and (true, false)'), any([False, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product any and (1, nan, "s", "")'), any([False, False, False, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product any and (1, "s", False)'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product any and (0, nan, "")'), any([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product any and (true, true)'), any([False, False, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product any and (true, false)'), any([False, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product any and (1, nan, "s", "")'), any([False, False, False, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product any and (1, "s", False)'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product any and (0, nan, "")'), any([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product any and (true, true)'), any([False, False, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product any and (true, false)'), any([False, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product any and (1, nan, "s", "")'), any([False, False, False, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product any and (1, "s", true)'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product any and (0, nan, "")'), any([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product any and (true, true)'), any([False, False, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product any and (true, false)'), any([False, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product any and (1, nan, "s", "")'), any([False, False, False, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product any and (1, "s", true)'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product any and (0, nan, "")'), any([False, False, False, False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any and ()'), any([]))

    def test_must_apply_and_seq_vs_seq_product_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all and (true, true)'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all and (true, false)'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all and (1, nan, "s", "")'), all([True, False, True, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all and (1, "s", true)'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all and (0, nan, "")'), all([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product all and (true, true)'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product all and (true, false)'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product all and (1, nan, "s", "")'), all([True, False, True, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product all and (1, "s", true)'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product all and (0, nan, "")'), all([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product all and (true, true)'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product all and (true, false)'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product all and (1, nan, "s", "")'), all([True, False, True, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product all and (1, "s", true)'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product all and (0, nan, "")'), all([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product all and (true, true)'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product all and (true, false)'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product all and (1, nan, "s", "")'), all([True, False, True, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product all and (1, "s", true)'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product all and (0, nan, "")'), all([False, False, False, False, False, False]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product all and (true, true)'), all([False, False, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product all and (true, false)'), all([False, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product all and (1, nan, "s", "")'), all([False, False, False, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product all and (1, "s", False)'), all([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product all and (0, nan, "")'), all([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product all and (true, true)'), all([False, False, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product all and (true, false)'), all([False, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product all and (1, nan, "s", "")'), all([False, False, False, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product all and (1, "s", False)'), all([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product all and (0, nan, "")'), all([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product all and (true, true)'), all([False, False, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product all and (true, false)'), all([False, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product all and (1, nan, "s", "")'), all([False, False, False, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product all and (1, "s", true)'), all([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product all and (0, nan, "")'), all([False, False, False, False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product all and (true, true)'), all([False, False, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product all and (true, false)'), all([False, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product all and (1, nan, "s", "")'), all([False, False, False, False, True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product all and (1, "s", true)'), all([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product all and (0, nan, "")'), all([False, False, False, False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all and ()'), all([]))

    def test_must_apply_and_seq_vs_seq(self):  # equiv to expand product any
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand and (0, nan, "")'), False)
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand and (1, "s", False)'), True)
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '("", true) expand and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '("", true) expand and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), '("", true) expand and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), '("", true) expand and (1, "s", False)'), True)
        self.assertEqual(evaluate(DummyNode(), '("", true) expand and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand and (0, nan, "")'), False)
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand and (true, true)'), True)
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand and (true, false)'), True)
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand and (1, nan, "s", "")'), True)
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand and (1, "s", true)'), True)
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand and (0, nan, "")'), False)
        # empty
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand and ()'), False)


if __name__ == '__main__':
    unittest.main()
