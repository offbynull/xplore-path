import unittest

from evaluator import evaluate


class EvaluatorTest(unittest.TestCase):
    def test_must_apply_or_single_vs_single(self):
        root = {}
        self.assertEqual(evaluate(root, 'true or true'), True)
        self.assertEqual(evaluate(root, 'true or false'), True)
        self.assertEqual(evaluate(root, 'false or true'), True)
        self.assertEqual(evaluate(root, 'false or false'), False)

        self.assertEqual(evaluate(root, 'a or true'), True)  # non-empty string coerces to true
        self.assertEqual(evaluate(root, 'a or false'), True)  # non-empty string coerces to true
        self.assertEqual(evaluate(root, 'true or a'), True)  # non-empty string coerces to true
        self.assertEqual(evaluate(root, 'false or a'), True)  # non-empty string coerces to true

        self.assertEqual(evaluate(root, '"" or true'), True)  # empty string coerces to false
        self.assertEqual(evaluate(root, '"" or false'), False)  # empty string coerces to false
        self.assertEqual(evaluate(root, 'true or ""'), True)  # empty string coerces to false
        self.assertEqual(evaluate(root, 'false or ""'), False)  # empty string coerces to false

        self.assertEqual(evaluate(root, '0 or true'), True)  # 0 coerces to false
        self.assertEqual(evaluate(root, '0 or false'), False)  # 0 coerces to false
        self.assertEqual(evaluate(root, 'true or 0'), True)  # 0 coerces to false
        self.assertEqual(evaluate(root, 'false or 0'), False)  # 0 coerces to false

        self.assertEqual(evaluate(root, 'nan or true'), True)  # nan coerces to false
        self.assertEqual(evaluate(root, 'nan or false'), False)  # nan coerces to false
        self.assertEqual(evaluate(root, 'true or nan'), True)  # nan coerces to false
        self.assertEqual(evaluate(root, 'false or nan'), False)  # nan coerces to false

        self.assertEqual(evaluate(root, '1 or true'), True)  # non-0 coerces to true
        self.assertEqual(evaluate(root, '1 or false'), True)  # non-0 coerces to true
        self.assertEqual(evaluate(root, 'true or 1'), True)  # non-0 coerces to true
        self.assertEqual(evaluate(root, 'false or 1'), True)  # non-0 coerces to true

        self.assertEqual(evaluate(root, '-1 or true'), True)  # non-0 coerces to true (even if its negative)
        self.assertEqual(evaluate(root, '-1 or false'), True)  # non-0 coerces to true (even if its negative)
        self.assertEqual(evaluate(root, 'true or -1'), True)  # non-0 coerces to true (even if its negative)
        self.assertEqual(evaluate(root, 'false or -1'), True)  # non-0 coerces to true (even if its negative)

    def test_must_apply_or_single_vs_seq_using_zip_sequence(self):
        root = {}
        # lhs coerces to true
        self.assertEqual(evaluate(root, 'true zip sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, 'true or zip sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, 'true zip sequence or [true, false]'), [True, True])
        self.assertEqual(evaluate(root, 'true or zip sequence [true, false]'), [True, True])
        self.assertEqual(evaluate(root, 'true zip sequence or [1, nan, "s", ""]'), [True, True, True, True])
        self.assertEqual(evaluate(root, 'true or zip sequence [1, nan, "s", ""]'), [True, True, True, True])
        self.assertEqual(evaluate(root, 'true zip sequence or [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, 'true or zip sequence [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, 'true zip sequence or [0, nan, ""]'), [True, True, True])
        self.assertEqual(evaluate(root, 'true or zip sequence [0, nan, ""]'), [True, True, True])
        self.assertEqual(evaluate(root, '"a" zip sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '"a" or zip sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '"a" zip sequence or [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '"a" or zip sequence [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '"a" zip sequence or [1, nan, "s", ""]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '"a" or zip sequence [1, nan, "s", ""]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '"a" zip sequence or [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, '"a" or zip sequence [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, '"a" zip sequence or [0, nan, ""]'), [True, True, True])
        self.assertEqual(evaluate(root, '"a" or zip sequence [0, nan, ""]'), [True, True, True])
        self.assertEqual(evaluate(root, '1 zip sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '1 or zip sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '1 zip sequence or [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '1 or zip sequence [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '1 zip sequence or [1, nan, "s", ""]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '1 or zip sequence [1, nan, "s", ""]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '1 zip sequence or [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, '1 or zip sequence [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, '1 zip sequence or [0, nan, ""]'), [True, True, True])
        self.assertEqual(evaluate(root, '1 or zip sequence [0, nan, ""]'), [True, True, True])
        self.assertEqual(evaluate(root, '1.5 zip sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '1.5 or zip sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '1.5 zip sequence or [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '1.5 or zip sequence [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '1.5 zip sequence or [1, nan, "s", ""]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '1.5 or zip sequence [1, nan, "s", ""]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '1.5 zip sequence or [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, '1.5 or zip sequence [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, '1.5 zip sequence or [0, nan, ""]'), [True, True, True])
        self.assertEqual(evaluate(root, '1.5 or zip sequence [0, nan, ""]'), [True, True, True])
        # lhs coerces to false
        self.assertEqual(evaluate(root, 'false zip sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, 'false or zip sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, 'false zip sequence or [true, false]'), [True, False])
        self.assertEqual(evaluate(root, 'false or zip sequence [true, false]'), [True, False])
        self.assertEqual(evaluate(root, 'false zip sequence or [1, nan, "s", ""]'), [True, False, True, False])
        self.assertEqual(evaluate(root, 'false or zip sequence [1, nan, "s", ""]'), [True, False, True, False])
        self.assertEqual(evaluate(root, 'false zip sequence or [1, "s", False]'), [True, True, True])
        self.assertEqual(evaluate(root, 'false or zip sequence [1, "s", False]'), [True, True, True])
        self.assertEqual(evaluate(root, 'false zip sequence or [0, nan, ""]'), [False, False, False])
        self.assertEqual(evaluate(root, 'false or zip sequence [0, nan, ""]'), [False, False, False])
        self.assertEqual(evaluate(root, '"" zip sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '"" or zip sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '"" zip sequence or [true, false]'), [True, False])
        self.assertEqual(evaluate(root, '"" or zip sequence [true, false]'), [True, False])
        self.assertEqual(evaluate(root, '"" zip sequence or [1, nan, "s", ""]'), [True, False, True, False])
        self.assertEqual(evaluate(root, '"" or zip sequence [1, nan, "s", ""]'), [True, False, True, False])
        self.assertEqual(evaluate(root, '"" zip sequence or [1, "s", False]'), [True, True, True])
        self.assertEqual(evaluate(root, '"" or zip sequence [1, "s", False]'), [True, True, True])
        self.assertEqual(evaluate(root, '"" zip sequence or [0, nan, ""]'), [False, False, False])
        self.assertEqual(evaluate(root, '"" or zip sequence [0, nan, ""]'), [False, False, False])
        self.assertEqual(evaluate(root, '0 zip sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '0 or zip sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '0 zip sequence or [true, false]'), [True, False])
        self.assertEqual(evaluate(root, '0 or zip sequence [true, false]'), [True, False])
        self.assertEqual(evaluate(root, '0 zip sequence or [1, nan, "s", ""]'), [True, False, True, False])
        self.assertEqual(evaluate(root, '0 or zip sequence [1, nan, "s", ""]'), [True, False, True, False])
        self.assertEqual(evaluate(root, '0 zip sequence or [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, '0 or zip sequence [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, '0 zip sequence or [0, nan, ""]'), [False, False, False])
        self.assertEqual(evaluate(root, '0 or zip sequence [0, nan, ""]'), [False, False, False])
        self.assertEqual(evaluate(root, 'nan zip sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, 'nan or zip sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, 'nan zip sequence or [true, false]'), [True, False])
        self.assertEqual(evaluate(root, 'nan or zip sequence [true, false]'), [True, False])
        self.assertEqual(evaluate(root, 'nan zip sequence or [1, nan, "s", ""]'), [True, False, True, False])
        self.assertEqual(evaluate(root, 'nan or zip sequence [1, nan, "s", ""]'), [True, False, True, False])
        self.assertEqual(evaluate(root, 'nan zip sequence or [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, 'nan or zip sequence [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, 'nan zip sequence or [0, nan, ""]'), [False, False, False])
        self.assertEqual(evaluate(root, 'nan or zip sequence [0, nan, ""]'), [False, False, False])
        # empty
        self.assertEqual(evaluate(root, 'true zip sequence or []'), [])
        self.assertEqual(evaluate(root, 'true or zip sequence []'), [])

    def test_must_apply_or_single_vs_seq_using_zip_any(self):
        root = {}
        # lhs coerces to true
        self.assertEqual(evaluate(root, 'true zip any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, 'true or zip any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, 'true zip any or [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, 'true or zip any [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, 'true zip any or [1, nan, "s", ""]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, 'true or zip any [1, nan, "s", ""]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, 'true zip any or [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, 'true or zip any [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, 'true zip any or [0, nan, ""]'), any([True, True, True]))
        self.assertEqual(evaluate(root, 'true or zip any [0, nan, ""]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '"a" zip any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '"a" or zip any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '"a" zip any or [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '"a" or zip any [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '"a" zip any or [1, nan, "s", ""]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '"a" or zip any [1, nan, "s", ""]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '"a" zip any or [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '"a" or zip any [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '"a" zip any or [0, nan, ""]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '"a" or zip any [0, nan, ""]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '1 zip any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '1 or zip any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '1 zip any or [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '1 or zip any [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '1 zip any or [1, nan, "s", ""]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '1 or zip any [1, nan, "s", ""]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '1 zip any or [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '1 or zip any [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '1 zip any or [0, nan, ""]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '1 or zip any [0, nan, ""]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '1.5 zip any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '1.5 or zip any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '1.5 zip any or [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '1.5 or zip any [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '1.5 zip any or [1, nan, "s", ""]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '1.5 or zip any [1, nan, "s", ""]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '1.5 zip any or [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '1.5 or zip any [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '1.5 zip any or [0, nan, ""]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '1.5 or zip any [0, nan, ""]'), any([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(root, 'false zip any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, 'false or zip any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, 'false zip any or [true, false]'), any([True, False]))
        self.assertEqual(evaluate(root, 'false or zip any [true, false]'), any([True, False]))
        self.assertEqual(evaluate(root, 'false zip any or [1, nan, "s", ""]'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, 'false or zip any [1, nan, "s", ""]'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, 'false zip any or [1, "s", False]'), any([True, True, True]))
        self.assertEqual(evaluate(root, 'false or zip any [1, "s", False]'), any([True, True, True]))
        self.assertEqual(evaluate(root, 'false zip any or [0, nan, ""]'), any([False, False, False]))
        self.assertEqual(evaluate(root, 'false or zip any [0, nan, ""]'), any([False, False, False]))
        self.assertEqual(evaluate(root, '"" zip any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '"" or zip any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '"" zip any or [true, false]'), any([True, False]))
        self.assertEqual(evaluate(root, '"" or zip any [true, false]'), any([True, False]))
        self.assertEqual(evaluate(root, '"" zip any or [1, nan, "s", ""]'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '"" or zip any [1, nan, "s", ""]'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '"" zip any or [1, "s", False]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '"" or zip any [1, "s", False]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '"" zip any or [0, nan, ""]'), any([False, False, False]))
        self.assertEqual(evaluate(root, '"" or zip any [0, nan, ""]'), any([False, False, False]))
        self.assertEqual(evaluate(root, '0 zip any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '0 or zip any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '0 zip any or [true, false]'), any([True, False]))
        self.assertEqual(evaluate(root, '0 or zip any [true, false]'), any([True, False]))
        self.assertEqual(evaluate(root, '0 zip any or [1, nan, "s", ""]'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '0 or zip any [1, nan, "s", ""]'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '0 zip any or [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '0 or zip any [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '0 zip any or [0, nan, ""]'), any([False, False, False]))
        self.assertEqual(evaluate(root, '0 or zip any [0, nan, ""]'), any([False, False, False]))
        self.assertEqual(evaluate(root, 'nan zip any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, 'nan or zip any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, 'nan zip any or [true, false]'), any([True, False]))
        self.assertEqual(evaluate(root, 'nan or zip any [true, false]'), any([True, False]))
        self.assertEqual(evaluate(root, 'nan zip any or [1, nan, "s", ""]'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, 'nan or zip any [1, nan, "s", ""]'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, 'nan zip any or [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, 'nan or zip any [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, 'nan zip any or [0, nan, ""]'), any([False, False, False]))
        self.assertEqual(evaluate(root, 'nan or zip any [0, nan, ""]'), any([False, False, False]))
        # empty
        self.assertEqual(evaluate(root, 'true zip any or []'), any([]))
        self.assertEqual(evaluate(root, 'true or zip any []'), any([]))
    
    def test_must_apply_or_single_vs_seq_using_zip_all(self):
        root = {}
        # lhs coerces to true
        self.assertEqual(evaluate(root, 'true zip all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, 'true or zip all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, 'true zip all or [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, 'true or zip all [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, 'true zip all or [1, nan, "s", ""]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, 'true or zip all [1, nan, "s", ""]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, 'true zip all or [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, 'true or zip all [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, 'true zip all or [0, nan, ""]'), all([True, True, True]))
        self.assertEqual(evaluate(root, 'true or zip all [0, nan, ""]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '"a" zip all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '"a" or zip all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '"a" zip all or [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '"a" or zip all [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '"a" zip all or [1, nan, "s", ""]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '"a" or zip all [1, nan, "s", ""]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '"a" zip all or [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '"a" or zip all [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '"a" zip all or [0, nan, ""]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '"a" or zip all [0, nan, ""]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '1 zip all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '1 or zip all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '1 zip all or [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '1 or zip all [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '1 zip all or [1, nan, "s", ""]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '1 or zip all [1, nan, "s", ""]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '1 zip all or [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '1 or zip all [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '1 zip all or [0, nan, ""]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '1 or zip all [0, nan, ""]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '1.5 zip all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '1.5 or zip all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '1.5 zip all or [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '1.5 or zip all [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '1.5 zip all or [1, nan, "s", ""]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '1.5 or zip all [1, nan, "s", ""]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '1.5 zip all or [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '1.5 or zip all [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '1.5 zip all or [0, nan, ""]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '1.5 or zip all [0, nan, ""]'), all([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(root, 'false zip all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, 'false or zip all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, 'false zip all or [true, false]'), all([True, False]))
        self.assertEqual(evaluate(root, 'false or zip all [true, false]'), all([True, False]))
        self.assertEqual(evaluate(root, 'false zip all or [1, nan, "s", ""]'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, 'false or zip all [1, nan, "s", ""]'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, 'false zip all or [1, "s", False]'), all([True, True, True]))
        self.assertEqual(evaluate(root, 'false or zip all [1, "s", False]'), all([True, True, True]))
        self.assertEqual(evaluate(root, 'false zip all or [0, nan, ""]'), all([False, False, False]))
        self.assertEqual(evaluate(root, 'false or zip all [0, nan, ""]'), all([False, False, False]))
        self.assertEqual(evaluate(root, '"" zip all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '"" or zip all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '"" zip all or [true, false]'), all([True, False]))
        self.assertEqual(evaluate(root, '"" or zip all [true, false]'), all([True, False]))
        self.assertEqual(evaluate(root, '"" zip all or [1, nan, "s", ""]'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '"" or zip all [1, nan, "s", ""]'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '"" zip all or [1, "s", False]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '"" or zip all [1, "s", False]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '"" zip all or [0, nan, ""]'), all([False, False, False]))
        self.assertEqual(evaluate(root, '"" or zip all [0, nan, ""]'), all([False, False, False]))
        self.assertEqual(evaluate(root, '0 zip all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '0 or zip all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '0 zip all or [true, false]'), all([True, False]))
        self.assertEqual(evaluate(root, '0 or zip all [true, false]'), all([True, False]))
        self.assertEqual(evaluate(root, '0 zip all or [1, nan, "s", ""]'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '0 or zip all [1, nan, "s", ""]'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '0 zip all or [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '0 or zip all [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '0 zip all or [0, nan, ""]'), all([False, False, False]))
        self.assertEqual(evaluate(root, '0 or zip all [0, nan, ""]'), all([False, False, False]))
        self.assertEqual(evaluate(root, 'nan zip all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, 'nan or zip all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, 'nan zip all or [true, false]'), all([True, False]))
        self.assertEqual(evaluate(root, 'nan or zip all [true, false]'), all([True, False]))
        self.assertEqual(evaluate(root, 'nan zip all or [1, nan, "s", ""]'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, 'nan or zip all [1, nan, "s", ""]'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, 'nan zip all or [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, 'nan or zip all [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, 'nan zip all or [0, nan, ""]'), all([False, False, False]))
        self.assertEqual(evaluate(root, 'nan or zip all [0, nan, ""]'), all([False, False, False]))
        # empty
        self.assertEqual(evaluate(root, 'true zip all or []'), all([]))
        self.assertEqual(evaluate(root, 'true or zip all []'), all([]))

    def test_must_apply_or_single_vs_seq_using_product_sequence(self):
        root = {}
        # lhs coerces to true
        self.assertEqual(evaluate(root, 'true product sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, 'true or product sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, 'true product sequence or [true, false]'), [True, True])
        self.assertEqual(evaluate(root, 'true or product sequence [true, false]'), [True, True])
        self.assertEqual(evaluate(root, 'true product sequence or [1, nan, "s", ""]'), [True, True, True, True])
        self.assertEqual(evaluate(root, 'true or product sequence [1, nan, "s", ""]'), [True, True, True, True])
        self.assertEqual(evaluate(root, 'true product sequence or [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, 'true or product sequence [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, 'true product sequence or [0, nan, ""]'), [True, True, True])
        self.assertEqual(evaluate(root, 'true or product sequence [0, nan, ""]'), [True, True, True])
        self.assertEqual(evaluate(root, '"a" product sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '"a" or product sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '"a" product sequence or [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '"a" or product sequence [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '"a" product sequence or [1, nan, "s", ""]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '"a" or product sequence [1, nan, "s", ""]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '"a" product sequence or [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, '"a" or product sequence [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, '"a" product sequence or [0, nan, ""]'), [True, True, True])
        self.assertEqual(evaluate(root, '"a" or product sequence [0, nan, ""]'), [True, True, True])
        self.assertEqual(evaluate(root, '1 product sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '1 or product sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '1 product sequence or [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '1 or product sequence [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '1 product sequence or [1, nan, "s", ""]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '1 or product sequence [1, nan, "s", ""]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '1 product sequence or [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, '1 or product sequence [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, '1 product sequence or [0, nan, ""]'), [True, True, True])
        self.assertEqual(evaluate(root, '1 or product sequence [0, nan, ""]'), [True, True, True])
        self.assertEqual(evaluate(root, '1.5 product sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '1.5 or product sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '1.5 product sequence or [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '1.5 or product sequence [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '1.5 product sequence or [1, nan, "s", ""]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '1.5 or product sequence [1, nan, "s", ""]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '1.5 product sequence or [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, '1.5 or product sequence [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, '1.5 product sequence or [0, nan, ""]'), [True, True, True])
        self.assertEqual(evaluate(root, '1.5 or product sequence [0, nan, ""]'), [True, True, True])
        # lhs coerces to false
        self.assertEqual(evaluate(root, 'false product sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, 'false or product sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, 'false product sequence or [true, false]'), [True, False])
        self.assertEqual(evaluate(root, 'false or product sequence [true, false]'), [True, False])
        self.assertEqual(evaluate(root, 'false product sequence or [1, nan, "s", ""]'), [True, False, True, False])
        self.assertEqual(evaluate(root, 'false or product sequence [1, nan, "s", ""]'), [True, False, True, False])
        self.assertEqual(evaluate(root, 'false product sequence or [1, "s", False]'), [True, True, True])
        self.assertEqual(evaluate(root, 'false or product sequence [1, "s", False]'), [True, True, True])
        self.assertEqual(evaluate(root, 'false product sequence or [0, nan, ""]'), [False, False, False])
        self.assertEqual(evaluate(root, 'false or product sequence [0, nan, ""]'), [False, False, False])
        self.assertEqual(evaluate(root, '"" product sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '"" or product sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '"" product sequence or [true, false]'), [True, False])
        self.assertEqual(evaluate(root, '"" or product sequence [true, false]'), [True, False])
        self.assertEqual(evaluate(root, '"" product sequence or [1, nan, "s", ""]'), [True, False, True, False])
        self.assertEqual(evaluate(root, '"" or product sequence [1, nan, "s", ""]'), [True, False, True, False])
        self.assertEqual(evaluate(root, '"" product sequence or [1, "s", False]'), [True, True, True])
        self.assertEqual(evaluate(root, '"" or product sequence [1, "s", False]'), [True, True, True])
        self.assertEqual(evaluate(root, '"" product sequence or [0, nan, ""]'), [False, False, False])
        self.assertEqual(evaluate(root, '"" or product sequence [0, nan, ""]'), [False, False, False])
        self.assertEqual(evaluate(root, '0 product sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '0 or product sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '0 product sequence or [true, false]'), [True, False])
        self.assertEqual(evaluate(root, '0 or product sequence [true, false]'), [True, False])
        self.assertEqual(evaluate(root, '0 product sequence or [1, nan, "s", ""]'), [True, False, True, False])
        self.assertEqual(evaluate(root, '0 or product sequence [1, nan, "s", ""]'), [True, False, True, False])
        self.assertEqual(evaluate(root, '0 product sequence or [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, '0 or product sequence [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, '0 product sequence or [0, nan, ""]'), [False, False, False])
        self.assertEqual(evaluate(root, '0 or product sequence [0, nan, ""]'), [False, False, False])
        self.assertEqual(evaluate(root, 'nan product sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, 'nan or product sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, 'nan product sequence or [true, false]'), [True, False])
        self.assertEqual(evaluate(root, 'nan or product sequence [true, false]'), [True, False])
        self.assertEqual(evaluate(root, 'nan product sequence or [1, nan, "s", ""]'), [True, False, True, False])
        self.assertEqual(evaluate(root, 'nan or product sequence [1, nan, "s", ""]'), [True, False, True, False])
        self.assertEqual(evaluate(root, 'nan product sequence or [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, 'nan or product sequence [1, "s", true]'), [True, True, True])
        self.assertEqual(evaluate(root, 'nan product sequence or [0, nan, ""]'), [False, False, False])
        self.assertEqual(evaluate(root, 'nan or product sequence [0, nan, ""]'), [False, False, False])
        # empty
        self.assertEqual(evaluate(root, 'true product sequence or []'), [])
        self.assertEqual(evaluate(root, 'true or product sequence []'), [])

    def test_must_apply_or_single_vs_seq_using_product_any(self):
        root = {}
        # lhs coerces to true
        self.assertEqual(evaluate(root, 'true product any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, 'true or product any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, 'true product any or [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, 'true or product any [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, 'true product any or [1, nan, "s", ""]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, 'true or product any [1, nan, "s", ""]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, 'true product any or [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, 'true or product any [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, 'true product any or [0, nan, ""]'), any([True, True, True]))
        self.assertEqual(evaluate(root, 'true or product any [0, nan, ""]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '"a" product any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '"a" or product any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '"a" product any or [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '"a" or product any [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '"a" product any or [1, nan, "s", ""]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '"a" or product any [1, nan, "s", ""]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '"a" product any or [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '"a" or product any [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '"a" product any or [0, nan, ""]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '"a" or product any [0, nan, ""]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '1 product any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '1 or product any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '1 product any or [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '1 or product any [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '1 product any or [1, nan, "s", ""]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '1 or product any [1, nan, "s", ""]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '1 product any or [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '1 or product any [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '1 product any or [0, nan, ""]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '1 or product any [0, nan, ""]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '1.5 product any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '1.5 or product any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '1.5 product any or [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '1.5 or product any [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '1.5 product any or [1, nan, "s", ""]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '1.5 or product any [1, nan, "s", ""]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '1.5 product any or [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '1.5 or product any [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '1.5 product any or [0, nan, ""]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '1.5 or product any [0, nan, ""]'), any([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(root, 'false product any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, 'false or product any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, 'false product any or [true, false]'), any([True, False]))
        self.assertEqual(evaluate(root, 'false or product any [true, false]'), any([True, False]))
        self.assertEqual(evaluate(root, 'false product any or [1, nan, "s", ""]'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, 'false or product any [1, nan, "s", ""]'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, 'false product any or [1, "s", False]'), any([True, True, True]))
        self.assertEqual(evaluate(root, 'false or product any [1, "s", False]'), any([True, True, True]))
        self.assertEqual(evaluate(root, 'false product any or [0, nan, ""]'), any([False, False, False]))
        self.assertEqual(evaluate(root, 'false or product any [0, nan, ""]'), any([False, False, False]))
        self.assertEqual(evaluate(root, '"" product any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '"" or product any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '"" product any or [true, false]'), any([True, False]))
        self.assertEqual(evaluate(root, '"" or product any [true, false]'), any([True, False]))
        self.assertEqual(evaluate(root, '"" product any or [1, nan, "s", ""]'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '"" or product any [1, nan, "s", ""]'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '"" product any or [1, "s", False]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '"" or product any [1, "s", False]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '"" product any or [0, nan, ""]'), any([False, False, False]))
        self.assertEqual(evaluate(root, '"" or product any [0, nan, ""]'), any([False, False, False]))
        self.assertEqual(evaluate(root, '0 product any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '0 or product any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '0 product any or [true, false]'), any([True, False]))
        self.assertEqual(evaluate(root, '0 or product any [true, false]'), any([True, False]))
        self.assertEqual(evaluate(root, '0 product any or [1, nan, "s", ""]'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '0 or product any [1, nan, "s", ""]'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '0 product any or [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '0 or product any [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '0 product any or [0, nan, ""]'), any([False, False, False]))
        self.assertEqual(evaluate(root, '0 or product any [0, nan, ""]'), any([False, False, False]))
        self.assertEqual(evaluate(root, 'nan product any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, 'nan or product any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, 'nan product any or [true, false]'), any([True, False]))
        self.assertEqual(evaluate(root, 'nan or product any [true, false]'), any([True, False]))
        self.assertEqual(evaluate(root, 'nan product any or [1, nan, "s", ""]'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, 'nan or product any [1, nan, "s", ""]'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, 'nan product any or [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, 'nan or product any [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, 'nan product any or [0, nan, ""]'), any([False, False, False]))
        self.assertEqual(evaluate(root, 'nan or product any [0, nan, ""]'), any([False, False, False]))
        # empty
        self.assertEqual(evaluate(root, 'true product any or []'), any([]))
        self.assertEqual(evaluate(root, 'true or product any []'), any([]))

    def test_must_apply_or_single_vs_seq_using_product_all(self):
        root = {}
        # lhs coerces to true
        self.assertEqual(evaluate(root, 'true product all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, 'true or product all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, 'true product all or [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, 'true or product all [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, 'true product all or [1, nan, "s", ""]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, 'true or product all [1, nan, "s", ""]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, 'true product all or [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, 'true or product all [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, 'true product all or [0, nan, ""]'), all([True, True, True]))
        self.assertEqual(evaluate(root, 'true or product all [0, nan, ""]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '"a" product all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '"a" or product all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '"a" product all or [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '"a" or product all [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '"a" product all or [1, nan, "s", ""]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '"a" or product all [1, nan, "s", ""]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '"a" product all or [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '"a" or product all [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '"a" product all or [0, nan, ""]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '"a" or product all [0, nan, ""]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '1 product all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '1 or product all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '1 product all or [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '1 or product all [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '1 product all or [1, nan, "s", ""]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '1 or product all [1, nan, "s", ""]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '1 product all or [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '1 or product all [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '1 product all or [0, nan, ""]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '1 or product all [0, nan, ""]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '1.5 product all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '1.5 or product all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '1.5 product all or [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '1.5 or product all [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '1.5 product all or [1, nan, "s", ""]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '1.5 or product all [1, nan, "s", ""]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '1.5 product all or [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '1.5 or product all [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '1.5 product all or [0, nan, ""]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '1.5 or product all [0, nan, ""]'), all([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(root, 'false product all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, 'false or product all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, 'false product all or [true, false]'), all([True, False]))
        self.assertEqual(evaluate(root, 'false or product all [true, false]'), all([True, False]))
        self.assertEqual(evaluate(root, 'false product all or [1, nan, "s", ""]'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, 'false or product all [1, nan, "s", ""]'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, 'false product all or [1, "s", False]'), all([True, True, True]))
        self.assertEqual(evaluate(root, 'false or product all [1, "s", False]'), all([True, True, True]))
        self.assertEqual(evaluate(root, 'false product all or [0, nan, ""]'), all([False, False, False]))
        self.assertEqual(evaluate(root, 'false or product all [0, nan, ""]'), all([False, False, False]))
        self.assertEqual(evaluate(root, '"" product all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '"" or product all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '"" product all or [true, false]'), all([True, False]))
        self.assertEqual(evaluate(root, '"" or product all [true, false]'), all([True, False]))
        self.assertEqual(evaluate(root, '"" product all or [1, nan, "s", ""]'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '"" or product all [1, nan, "s", ""]'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '"" product all or [1, "s", False]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '"" or product all [1, "s", False]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '"" product all or [0, nan, ""]'), all([False, False, False]))
        self.assertEqual(evaluate(root, '"" or product all [0, nan, ""]'), all([False, False, False]))
        self.assertEqual(evaluate(root, '0 product all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '0 or product all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '0 product all or [true, false]'), all([True, False]))
        self.assertEqual(evaluate(root, '0 or product all [true, false]'), all([True, False]))
        self.assertEqual(evaluate(root, '0 product all or [1, nan, "s", ""]'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '0 or product all [1, nan, "s", ""]'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '0 product all or [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '0 or product all [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, '0 product all or [0, nan, ""]'), all([False, False, False]))
        self.assertEqual(evaluate(root, '0 or product all [0, nan, ""]'), all([False, False, False]))
        self.assertEqual(evaluate(root, 'nan product all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, 'nan or product all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, 'nan product all or [true, false]'), all([True, False]))
        self.assertEqual(evaluate(root, 'nan or product all [true, false]'), all([True, False]))
        self.assertEqual(evaluate(root, 'nan product all or [1, nan, "s", ""]'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, 'nan or product all [1, nan, "s", ""]'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, 'nan product all or [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, 'nan or product all [1, "s", true]'), all([True, True, True]))
        self.assertEqual(evaluate(root, 'nan product all or [0, nan, ""]'), all([False, False, False]))
        self.assertEqual(evaluate(root, 'nan or product all [0, nan, ""]'), all([False, False, False]))
        # empty
        self.assertEqual(evaluate(root, 'true product all or []'), all([]))
        self.assertEqual(evaluate(root, 'true or product all []'), all([]))
        
    def test_must_apply_or_single_vs_seq(self):  # equiv to product any
        root = {}
        # lhs coerces to true
        self.assertEqual(evaluate(root, 'true or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, 'true or [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, 'true or [1, nan, "s", ""]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, 'true or [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, 'true or [0, nan, ""]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '"a" or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '"a" or [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '"a" or [1, nan, "s", ""]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '"a" or [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '"a" or [0, nan, ""]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '1 or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '1 or [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '1 or [1, nan, "s", ""]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '1 or [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '1 or [0, nan, ""]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '1.5 or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '1.5 or [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '1.5 or [1, nan, "s", ""]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '1.5 or [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '1.5 or [0, nan, ""]'), any([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(root, 'false or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, 'false or [true, false]'), any([True, False]))
        self.assertEqual(evaluate(root, 'false or [1, nan, "s", ""]'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, 'false or [1, "s", False]'), any([True, True, True]))
        self.assertEqual(evaluate(root, 'false or [0, nan, ""]'), any([False, False, False]))
        self.assertEqual(evaluate(root, '"" or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '"" or [true, false]'), any([True, False]))
        self.assertEqual(evaluate(root, '"" or [1, nan, "s", ""]'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '"" or [1, "s", False]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '"" or [0, nan, ""]'), any([False, False, False]))
        self.assertEqual(evaluate(root, '0 or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '0 or [true, false]'), any([True, False]))
        self.assertEqual(evaluate(root, '0 or [1, nan, "s", ""]'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '0 or [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, '0 or [0, nan, ""]'), any([False, False, False]))
        self.assertEqual(evaluate(root, 'nan or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, 'nan or [true, false]'), any([True, False]))
        self.assertEqual(evaluate(root, 'nan or [1, nan, "s", ""]'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, 'nan or [1, "s", true]'), any([True, True, True]))
        self.assertEqual(evaluate(root, 'nan or [0, nan, ""]'), any([False, False, False]))
        # empty
        self.assertEqual(evaluate(root, 'true or []'), any([]))

    def test_must_apply_or_seq_vs_single_using_zip_sequence(self):
        root = {}
        # lhs coerces to true
        self.assertEqual(evaluate(root, '[true, true] zip sequence or true'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] or zip sequence true'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] zip sequence or true'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] or zip sequence true'), [True, True])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip sequence or true'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip sequence true'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", true] zip sequence or true'), [True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", true] or zip sequence true'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] zip sequence or true'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip sequence true'), [True, True, True])
        self.assertEqual(evaluate(root, '[true, true] zip sequence or "a"'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] or zip sequence "a"'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] zip sequence or "a"'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] or zip sequence "a"'), [True, True])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip sequence or "a"'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip sequence "a"'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", true] zip sequence or "a"'), [True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", true] or zip sequence "a"'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] zip sequence or "a"'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip sequence "a"'), [True, True, True])
        self.assertEqual(evaluate(root, '[true, true] zip sequence or 1'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] or zip sequence 1'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] zip sequence or 1'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] or zip sequence 1'), [True, True])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip sequence or 1'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip sequence 1'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", true] zip sequence or 1'), [True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", true] or zip sequence 1'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] zip sequence or 1'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip sequence 1'), [True, True, True])
        self.assertEqual(evaluate(root, '[true, true] zip sequence or 1.5'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] or zip sequence 1.5'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] zip sequence or 1.5'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] or zip sequence 1.5'), [True, True])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip sequence or 1.5'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip sequence 1.5'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", true] zip sequence or 1.5'), [True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", true] or zip sequence 1.5'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] zip sequence or 1.5'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip sequence 1.5'), [True, True, True])
        # lhs coerces to false
        self.assertEqual(evaluate(root, '[true, true] zip sequence or false'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] or zip sequence false'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] zip sequence or false'), [True, False])
        self.assertEqual(evaluate(root, '[true, false] or zip sequence false'), [True, False])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip sequence or false'), [True, False, True, False])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip sequence false'), [True, False, True, False])
        self.assertEqual(evaluate(root, '[1, "s", False] zip sequence or false'), [True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", False] or zip sequence false'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] zip sequence or false'), [False, False, False])
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip sequence false'), [False, False, False])
        self.assertEqual(evaluate(root, '[true, true] zip sequence or ""'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] or zip sequence ""'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] zip sequence or ""'), [True, False])
        self.assertEqual(evaluate(root, '[true, false] or zip sequence ""'), [True, False])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip sequence or ""'), [True, False, True, False])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip sequence ""'), [True, False, True, False])
        self.assertEqual(evaluate(root, '[1, "s", False] zip sequence or ""'), [True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", False] or zip sequence ""'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] zip sequence or ""'), [False, False, False])
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip sequence ""'), [False, False, False])
        self.assertEqual(evaluate(root, '[true, true] zip sequence or 0'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] or zip sequence 0'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] zip sequence or 0'), [True, False])
        self.assertEqual(evaluate(root, '[true, false] or zip sequence 0'), [True, False])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip sequence or 0'), [True, False, True, False])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip sequence 0'), [True, False, True, False])
        self.assertEqual(evaluate(root, '[1, "s", true] zip sequence or 0'), [True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", true] or zip sequence 0'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] zip sequence or 0'), [False, False, False])
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip sequence 0'), [False, False, False])
        self.assertEqual(evaluate(root, '[true, true] zip sequence or nan'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] or zip sequence nan'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] zip sequence or nan'), [True, False])
        self.assertEqual(evaluate(root, '[true, false] or zip sequence nan'), [True, False])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip sequence or nan'), [True, False, True, False])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip sequence nan'), [True, False, True, False])
        self.assertEqual(evaluate(root, '[1, "s", true] zip sequence or nan'), [True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", true] or zip sequence nan'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] zip sequence or nan'), [False, False, False])
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip sequence nan'), [False, False, False])
        # empty
        self.assertEqual(evaluate(root, '[] zip sequence or true'), [])
        self.assertEqual(evaluate(root, '[] or zip sequence true'), [])

    def test_must_apply_or_seq_vs_single_using_zip_any(self):
        root = {}
        # lhs coerces to true
        self.assertEqual(evaluate(root, '[true, true] zip any or true'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip any true'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] zip any or true'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or zip any true'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip any or true'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip any true'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] zip any or true'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or zip any true'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] zip any or true'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip any true'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] zip any or "a"'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip any "a"'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] zip any or "a"'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or zip any "a"'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip any or "a"'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip any "a"'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] zip any or "a"'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or zip any "a"'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] zip any or "a"'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip any "a"'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] zip any or 1'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip any 1'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] zip any or 1'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or zip any 1'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip any or 1'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip any 1'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] zip any or 1'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or zip any 1'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] zip any or 1'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip any 1'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] zip any or 1.5'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip any 1.5'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] zip any or 1.5'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or zip any 1.5'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip any or 1.5'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip any 1.5'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] zip any or 1.5'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or zip any 1.5'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] zip any or 1.5'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip any 1.5'), any([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(root, '[true, true] zip any or false'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip any false'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] zip any or false'), any([True, False]))
        self.assertEqual(evaluate(root, '[true, false] or zip any false'), any([True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip any or false'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip any false'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, "s", False] zip any or false'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", False] or zip any false'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] zip any or false'), any([False, False, False]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip any false'), any([False, False, False]))
        self.assertEqual(evaluate(root, '[true, true] zip any or ""'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip any ""'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] zip any or ""'), any([True, False]))
        self.assertEqual(evaluate(root, '[true, false] or zip any ""'), any([True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip any or ""'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip any ""'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, "s", False] zip any or ""'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", False] or zip any ""'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] zip any or ""'), any([False, False, False]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip any ""'), any([False, False, False]))
        self.assertEqual(evaluate(root, '[true, true] zip any or 0'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip any 0'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] zip any or 0'), any([True, False]))
        self.assertEqual(evaluate(root, '[true, false] or zip any 0'), any([True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip any or 0'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip any 0'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, "s", true] zip any or 0'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or zip any 0'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] zip any or 0'), any([False, False, False]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip any 0'), any([False, False, False]))
        self.assertEqual(evaluate(root, '[true, true] zip any or nan'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip any nan'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] zip any or nan'), any([True, False]))
        self.assertEqual(evaluate(root, '[true, false] or zip any nan'), any([True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip any or nan'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip any nan'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, "s", true] zip any or nan'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or zip any nan'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] zip any or nan'), any([False, False, False]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip any nan'), any([False, False, False]))
        # empty
        self.assertEqual(evaluate(root, '[] zip any or true'), any([]))
        self.assertEqual(evaluate(root, '[] or zip any true'), any([]))

    def test_must_apply_or_seq_vs_single_using_zip_all(self):
        root = {}
        # lhs coerces to true
        self.assertEqual(evaluate(root, '[true, true] zip all or true'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip all true'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] zip all or true'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or zip all true'), all([True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip all or true'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip all true'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] zip all or true'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or zip all true'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] zip all or true'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip all true'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] zip all or "a"'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip all "a"'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] zip all or "a"'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or zip all "a"'), all([True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip all or "a"'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip all "a"'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] zip all or "a"'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or zip all "a"'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] zip all or "a"'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip all "a"'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] zip all or 1'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip all 1'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] zip all or 1'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or zip all 1'), all([True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip all or 1'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip all 1'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] zip all or 1'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or zip all 1'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] zip all or 1'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip all 1'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] zip all or 1.5'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip all 1.5'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] zip all or 1.5'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or zip all 1.5'), all([True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip all or 1.5'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip all 1.5'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] zip all or 1.5'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or zip all 1.5'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] zip all or 1.5'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip all 1.5'), all([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(root, '[true, true] zip all or false'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip all false'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] zip all or false'), all([True, False]))
        self.assertEqual(evaluate(root, '[true, false] or zip all false'), all([True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip all or false'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip all false'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, "s", False] zip all or false'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", False] or zip all false'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] zip all or false'), all([False, False, False]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip all false'), all([False, False, False]))
        self.assertEqual(evaluate(root, '[true, true] zip all or ""'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip all ""'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] zip all or ""'), all([True, False]))
        self.assertEqual(evaluate(root, '[true, false] or zip all ""'), all([True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip all or ""'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip all ""'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, "s", False] zip all or ""'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", False] or zip all ""'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] zip all or ""'), all([False, False, False]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip all ""'), all([False, False, False]))
        self.assertEqual(evaluate(root, '[true, true] zip all or 0'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip all 0'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] zip all or 0'), all([True, False]))
        self.assertEqual(evaluate(root, '[true, false] or zip all 0'), all([True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip all or 0'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip all 0'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, "s", true] zip all or 0'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or zip all 0'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] zip all or 0'), all([False, False, False]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip all 0'), all([False, False, False]))
        self.assertEqual(evaluate(root, '[true, true] zip all or nan'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip all nan'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] zip all or nan'), all([True, False]))
        self.assertEqual(evaluate(root, '[true, false] or zip all nan'), all([True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] zip all or nan'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or zip all nan'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, "s", true] zip all or nan'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or zip all nan'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] zip all or nan'), all([False, False, False]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or zip all nan'), all([False, False, False]))
        # empty
        self.assertEqual(evaluate(root, '[] zip all or true'), all([]))
        self.assertEqual(evaluate(root, '[] or zip all true'), all([]))

    def test_must_apply_or_seq_vs_single_using_product_sequence(self):
        root = {}
        # lhs coerces to true
        self.assertEqual(evaluate(root, '[true, true] product sequence or true'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] or product sequence true'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] product sequence or true'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] or product sequence true'), [True, True])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product sequence or true'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product sequence true'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", true] product sequence or true'), [True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", true] or product sequence true'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] product sequence or true'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] or product sequence true'), [True, True, True])
        self.assertEqual(evaluate(root, '[true, true] product sequence or "a"'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] or product sequence "a"'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] product sequence or "a"'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] or product sequence "a"'), [True, True])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product sequence or "a"'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product sequence "a"'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", true] product sequence or "a"'), [True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", true] or product sequence "a"'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] product sequence or "a"'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] or product sequence "a"'), [True, True, True])
        self.assertEqual(evaluate(root, '[true, true] product sequence or 1'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] or product sequence 1'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] product sequence or 1'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] or product sequence 1'), [True, True])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product sequence or 1'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product sequence 1'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", true] product sequence or 1'), [True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", true] or product sequence 1'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] product sequence or 1'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] or product sequence 1'), [True, True, True])
        self.assertEqual(evaluate(root, '[true, true] product sequence or 1.5'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] or product sequence 1.5'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] product sequence or 1.5'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] or product sequence 1.5'), [True, True])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product sequence or 1.5'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product sequence 1.5'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", true] product sequence or 1.5'), [True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", true] or product sequence 1.5'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] product sequence or 1.5'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] or product sequence 1.5'), [True, True, True])
        # lhs coerces to false
        self.assertEqual(evaluate(root, '[true, true] product sequence or false'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] or product sequence false'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] product sequence or false'), [True, False])
        self.assertEqual(evaluate(root, '[true, false] or product sequence false'), [True, False])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product sequence or false'), [True, False, True, False])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product sequence false'), [True, False, True, False])
        self.assertEqual(evaluate(root, '[1, "s", False] product sequence or false'), [True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", False] or product sequence false'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] product sequence or false'), [False, False, False])
        self.assertEqual(evaluate(root, '[0, nan, ""] or product sequence false'), [False, False, False])
        self.assertEqual(evaluate(root, '[true, true] product sequence or ""'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] or product sequence ""'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] product sequence or ""'), [True, False])
        self.assertEqual(evaluate(root, '[true, false] or product sequence ""'), [True, False])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product sequence or ""'), [True, False, True, False])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product sequence ""'), [True, False, True, False])
        self.assertEqual(evaluate(root, '[1, "s", False] product sequence or ""'), [True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", False] or product sequence ""'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] product sequence or ""'), [False, False, False])
        self.assertEqual(evaluate(root, '[0, nan, ""] or product sequence ""'), [False, False, False])
        self.assertEqual(evaluate(root, '[true, true] product sequence or 0'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] or product sequence 0'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] product sequence or 0'), [True, False])
        self.assertEqual(evaluate(root, '[true, false] or product sequence 0'), [True, False])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product sequence or 0'), [True, False, True, False])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product sequence 0'), [True, False, True, False])
        self.assertEqual(evaluate(root, '[1, "s", true] product sequence or 0'), [True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", true] or product sequence 0'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] product sequence or 0'), [False, False, False])
        self.assertEqual(evaluate(root, '[0, nan, ""] or product sequence 0'), [False, False, False])
        self.assertEqual(evaluate(root, '[true, true] product sequence or nan'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] or product sequence nan'), [True, True])
        self.assertEqual(evaluate(root, '[true, false] product sequence or nan'), [True, False])
        self.assertEqual(evaluate(root, '[true, false] or product sequence nan'), [True, False])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product sequence or nan'), [True, False, True, False])
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product sequence nan'), [True, False, True, False])
        self.assertEqual(evaluate(root, '[1, "s", true] product sequence or nan'), [True, True, True])
        self.assertEqual(evaluate(root, '[1, "s", true] or product sequence nan'), [True, True, True])
        self.assertEqual(evaluate(root, '[0, nan, ""] product sequence or nan'), [False, False, False])
        self.assertEqual(evaluate(root, '[0, nan, ""] or product sequence nan'), [False, False, False])
        # empty
        self.assertEqual(evaluate(root, '[] product sequence or true'), [])
        self.assertEqual(evaluate(root, '[] or product sequence true'), [])
    def test_must_apply_or_seq_vs_single_using_product_any(self):
        root = {}
        # lhs coerces to true
        self.assertEqual(evaluate(root, '[true, true] product any or true'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product any true'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] product any or true'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or product any true'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product any or true'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product any true'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] product any or true'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or product any true'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] product any or true'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or product any true'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] product any or "a"'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product any "a"'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] product any or "a"'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or product any "a"'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product any or "a"'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product any "a"'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] product any or "a"'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or product any "a"'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] product any or "a"'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or product any "a"'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] product any or 1'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product any 1'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] product any or 1'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or product any 1'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product any or 1'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product any 1'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] product any or 1'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or product any 1'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] product any or 1'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or product any 1'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] product any or 1.5'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product any 1.5'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] product any or 1.5'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or product any 1.5'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product any or 1.5'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product any 1.5'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] product any or 1.5'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or product any 1.5'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] product any or 1.5'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or product any 1.5'), any([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(root, '[true, true] product any or false'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product any false'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] product any or false'), any([True, False]))
        self.assertEqual(evaluate(root, '[true, false] or product any false'), any([True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product any or false'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product any false'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, "s", False] product any or false'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", False] or product any false'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] product any or false'), any([False, False, False]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or product any false'), any([False, False, False]))
        self.assertEqual(evaluate(root, '[true, true] product any or ""'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product any ""'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] product any or ""'), any([True, False]))
        self.assertEqual(evaluate(root, '[true, false] or product any ""'), any([True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product any or ""'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product any ""'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, "s", False] product any or ""'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", False] or product any ""'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] product any or ""'), any([False, False, False]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or product any ""'), any([False, False, False]))
        self.assertEqual(evaluate(root, '[true, true] product any or 0'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product any 0'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] product any or 0'), any([True, False]))
        self.assertEqual(evaluate(root, '[true, false] or product any 0'), any([True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product any or 0'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product any 0'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, "s", true] product any or 0'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or product any 0'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] product any or 0'), any([False, False, False]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or product any 0'), any([False, False, False]))
        self.assertEqual(evaluate(root, '[true, true] product any or nan'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product any nan'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] product any or nan'), any([True, False]))
        self.assertEqual(evaluate(root, '[true, false] or product any nan'), any([True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product any or nan'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product any nan'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, "s", true] product any or nan'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or product any nan'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] product any or nan'), any([False, False, False]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or product any nan'), any([False, False, False]))
        # empty
        self.assertEqual(evaluate(root, '[] product any or true'), any([]))
        self.assertEqual(evaluate(root, '[] or product any true'), any([]))

    def test_must_apply_or_seq_vs_single_using_product_all(self):
        root = {}
        # lhs coerces to true
        self.assertEqual(evaluate(root, '[true, true] product all or true'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product all true'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] product all or true'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or product all true'), all([True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product all or true'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product all true'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] product all or true'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or product all true'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] product all or true'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or product all true'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] product all or "a"'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product all "a"'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] product all or "a"'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or product all "a"'), all([True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product all or "a"'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product all "a"'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] product all or "a"'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or product all "a"'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] product all or "a"'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or product all "a"'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] product all or 1'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product all 1'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] product all or 1'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or product all 1'), all([True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product all or 1'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product all 1'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] product all or 1'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or product all 1'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] product all or 1'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or product all 1'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] product all or 1.5'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product all 1.5'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] product all or 1.5'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or product all 1.5'), all([True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product all or 1.5'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product all 1.5'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] product all or 1.5'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or product all 1.5'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] product all or 1.5'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or product all 1.5'), all([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(root, '[true, true] product all or false'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product all false'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] product all or false'), all([True, False]))
        self.assertEqual(evaluate(root, '[true, false] or product all false'), all([True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product all or false'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product all false'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, "s", False] product all or false'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", False] or product all false'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] product all or false'), all([False, False, False]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or product all false'), all([False, False, False]))
        self.assertEqual(evaluate(root, '[true, true] product all or ""'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product all ""'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] product all or ""'), all([True, False]))
        self.assertEqual(evaluate(root, '[true, false] or product all ""'), all([True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product all or ""'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product all ""'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, "s", False] product all or ""'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", False] or product all ""'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] product all or ""'), all([False, False, False]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or product all ""'), all([False, False, False]))
        self.assertEqual(evaluate(root, '[true, true] product all or 0'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product all 0'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] product all or 0'), all([True, False]))
        self.assertEqual(evaluate(root, '[true, false] or product all 0'), all([True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product all or 0'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product all 0'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, "s", true] product all or 0'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or product all 0'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] product all or 0'), all([False, False, False]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or product all 0'), all([False, False, False]))
        self.assertEqual(evaluate(root, '[true, true] product all or nan'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product all nan'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, false] product all or nan'), all([True, False]))
        self.assertEqual(evaluate(root, '[true, false] or product all nan'), all([True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] product all or nan'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or product all nan'), all([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, "s", true] product all or nan'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or product all nan'), all([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] product all or nan'), all([False, False, False]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or product all nan'), all([False, False, False]))
        # empty
        self.assertEqual(evaluate(root, '[] product all or true'), all([]))
        self.assertEqual(evaluate(root, '[] or product all true'), all([]))

    def test_must_apply_or_seq_vs_single(self):  # equiv to product any
        root = {}
        # lhs coerces to true
        self.assertEqual(evaluate(root, '[true, true] or true'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or true'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or true'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or true'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or true'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] or "a"'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or "a"'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or "a"'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or "a"'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or "a"'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] or 1'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or 1'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or 1'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or 1'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or 1'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] or 1.5'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or 1.5'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or 1.5'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, "s", true] or 1.5'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or 1.5'), any([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(root, '[true, true] or false'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or false'), any([True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or false'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, "s", False] or false'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or false'), any([False, False, False]))
        self.assertEqual(evaluate(root, '[true, true] or ""'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or ""'), any([True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or ""'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, "s", False] or ""'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or ""'), any([False, False, False]))
        self.assertEqual(evaluate(root, '[true, true] or 0'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or 0'), any([True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or 0'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, "s", true] or 0'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or 0'), any([False, False, False]))
        self.assertEqual(evaluate(root, '[true, true] or nan'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, false] or nan'), any([True, False]))
        self.assertEqual(evaluate(root, '[1, nan, "s", ""] or nan'), any([True, False, True, False]))
        self.assertEqual(evaluate(root, '[1, "s", true] or nan'), any([True, True, True]))
        self.assertEqual(evaluate(root, '[0, nan, ""] or nan'), any([False, False, False]))
        # empty
        self.assertEqual(evaluate(root, '[] or true'), any([]))
        
    def test_must_apply_or_seq_vs_seq_using_zip_sequence(self):
        root = {}
        # lhs coerces to true
        self.assertEqual(evaluate(root, '[true, true] zip sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] or zip sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] zip sequence or [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] or zip sequence [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] zip sequence or [1, nan, "s", ""]'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] or zip sequence [1, nan, "s", ""]'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] zip sequence or [1, "s", true]'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] or zip sequence [1, "s", true]'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] zip sequence or [0, nan, ""]'), [True, True])
        self.assertEqual(evaluate(root, '[true, true] or zip sequence [0, nan, ""]'), [True, True])
        self.assertEqual(evaluate(root, '["a", true] zip sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '["a", true] or zip sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '["a", true] zip sequence or [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '["a", true] or zip sequence [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '["a", true] zip sequence or [1, nan, "s", ""]'), [True, True])
        self.assertEqual(evaluate(root, '["a", true] or zip sequence [1, nan, "s", ""]'), [True, True])
        self.assertEqual(evaluate(root, '["a", true] zip sequence or [1, "s", true]'), [True, True])
        self.assertEqual(evaluate(root, '["a", true] or zip sequence [1, "s", true]'), [True, True])
        self.assertEqual(evaluate(root, '["a", true] zip sequence or [0, nan, ""]'), [True, True])
        self.assertEqual(evaluate(root, '["a", true] or zip sequence [0, nan, ""]'), [True, True])
        self.assertEqual(evaluate(root, '[1, true] zip sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '[1, true] or zip sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '[1, true] zip sequence or [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '[1, true] or zip sequence [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '[1, true] zip sequence or [1, nan, "s", ""]'), [True, True])
        self.assertEqual(evaluate(root, '[1, true] or zip sequence [1, nan, "s", ""]'), [True, True])
        self.assertEqual(evaluate(root, '[1, true] zip sequence or [1, "s", true]'), [True, True])
        self.assertEqual(evaluate(root, '[1, true] or zip sequence [1, "s", true]'), [True, True])
        self.assertEqual(evaluate(root, '[1, true] zip sequence or [0, nan, ""]'), [True, True])
        self.assertEqual(evaluate(root, '[1, true] or zip sequence [0, nan, ""]'), [True, True])
        self.assertEqual(evaluate(root, '[1.5, true] zip sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '[1.5, true] or zip sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '[1.5, true] zip sequence or [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '[1.5, true] or zip sequence [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '[1.5, true] zip sequence or [1, nan, "s", ""]'), [True, True])
        self.assertEqual(evaluate(root, '[1.5, true] or zip sequence [1, nan, "s", ""]'), [True, True])
        self.assertEqual(evaluate(root, '[1.5, true] zip sequence or [1, "s", true]'), [True, True])
        self.assertEqual(evaluate(root, '[1.5, true] or zip sequence [1, "s", true]'), [True, True])
        self.assertEqual(evaluate(root, '[1.5, true] zip sequence or [0, nan, ""]'), [True, True])
        self.assertEqual(evaluate(root, '[1.5, true] or zip sequence [0, nan, ""]'), [True, True])
        # lhs coerces to false
        self.assertEqual(evaluate(root, '[false, true] zip sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '[false, true] or zip sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '[false, true] zip sequence or [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '[false, true] or zip sequence [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '[false, true] zip sequence or [1, nan, "s", ""]'), [True, True])
        self.assertEqual(evaluate(root, '[false, true] or zip sequence [1, nan, "s", ""]'), [True, True])
        self.assertEqual(evaluate(root, '[false, true] zip sequence or [1, "s", False]'), [True, True])
        self.assertEqual(evaluate(root, '[false, true] or zip sequence [1, "s", False]'), [True, True])
        self.assertEqual(evaluate(root, '[false, true] zip sequence or [0, nan, ""]'), [False, True])
        self.assertEqual(evaluate(root, '[false, true] or zip sequence [0, nan, ""]'), [False, True])
        self.assertEqual(evaluate(root, '["", true] zip sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '["", true] or zip sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '["", true] zip sequence or [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '["", true] or zip sequence [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '["", true] zip sequence or [1, nan, "s", ""]'), [True, True])
        self.assertEqual(evaluate(root, '["", true] or zip sequence [1, nan, "s", ""]'), [True, True])
        self.assertEqual(evaluate(root, '["", true] zip sequence or [1, "s", False]'), [True, True])
        self.assertEqual(evaluate(root, '["", true] or zip sequence [1, "s", False]'), [True, True])
        self.assertEqual(evaluate(root, '["", true] zip sequence or [0, nan, ""]'), [False, True])
        self.assertEqual(evaluate(root, '["", true] or zip sequence [0, nan, ""]'), [False, True])
        self.assertEqual(evaluate(root, '[0, true] zip sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '[0, true] or zip sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '[0, true] zip sequence or [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '[0, true] or zip sequence [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '[0, true] zip sequence or [1, nan, "s", ""]'), [True, True])
        self.assertEqual(evaluate(root, '[0, true] or zip sequence [1, nan, "s", ""]'), [True, True])
        self.assertEqual(evaluate(root, '[0, true] zip sequence or [1, "s", true]'), [True, True])
        self.assertEqual(evaluate(root, '[0, true] or zip sequence [1, "s", true]'), [True, True])
        self.assertEqual(evaluate(root, '[0, true] zip sequence or [0, nan, ""]'), [False, True])
        self.assertEqual(evaluate(root, '[0, true] or zip sequence [0, nan, ""]'), [False, True])
        self.assertEqual(evaluate(root, '[nan, true] zip sequence or [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '[nan, true] or zip sequence [true, true]'), [True, True])
        self.assertEqual(evaluate(root, '[nan, true] zip sequence or [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '[nan, true] or zip sequence [true, false]'), [True, True])
        self.assertEqual(evaluate(root, '[nan, true] zip sequence or [1, nan, "s", ""]'), [True, True])
        self.assertEqual(evaluate(root, '[nan, true] or zip sequence [1, nan, "s", ""]'), [True, True])
        self.assertEqual(evaluate(root, '[nan, true] zip sequence or [1, "s", true]'), [True, True])
        self.assertEqual(evaluate(root, '[nan, true] or zip sequence [1, "s", true]'), [True, True])
        self.assertEqual(evaluate(root, '[nan, true] zip sequence or [0, nan, ""]'), [False, True])
        self.assertEqual(evaluate(root, '[nan, true] or zip sequence [0, nan, ""]'), [False, True])
        # empty
        self.assertEqual(evaluate(root, '[true, true] zip sequence or []'), [])
        self.assertEqual(evaluate(root, '[true, true] or zip sequence []'), [])

    def test_must_apply_or_seq_vs_seq_using_zip_any(self):
        root = {}
        # lhs coerces to true
        self.assertEqual(evaluate(root, '[true, true] zip any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] zip any or [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip any [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] zip any or [1, nan, "s", ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip any [1, nan, "s", ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] zip any or [1, "s", true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip any [1, "s", true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] zip any or [0, nan, ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip any [0, nan, ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '["a", true] zip any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '["a", true] or zip any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '["a", true] zip any or [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '["a", true] or zip any [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '["a", true] zip any or [1, nan, "s", ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '["a", true] or zip any [1, nan, "s", ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '["a", true] zip any or [1, "s", true]'), any([True, True]))
        self.assertEqual(evaluate(root, '["a", true] or zip any [1, "s", true]'), any([True, True]))
        self.assertEqual(evaluate(root, '["a", true] zip any or [0, nan, ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '["a", true] or zip any [0, nan, ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, true] zip any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, true] or zip any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, true] zip any or [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, true] or zip any [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, true] zip any or [1, nan, "s", ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, true] or zip any [1, nan, "s", ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, true] zip any or [1, "s", true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, true] or zip any [1, "s", true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, true] zip any or [0, nan, ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '[1, true] or zip any [0, nan, ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] zip any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or zip any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] zip any or [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or zip any [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] zip any or [1, nan, "s", ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or zip any [1, nan, "s", ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] zip any or [1, "s", true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or zip any [1, "s", true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] zip any or [0, nan, ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or zip any [0, nan, ""]'), any([True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(root, '[false, true] zip any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[false, true] or zip any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[false, true] zip any or [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '[false, true] or zip any [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '[false, true] zip any or [1, nan, "s", ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '[false, true] or zip any [1, nan, "s", ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '[false, true] zip any or [1, "s", False]'), any([True, True]))
        self.assertEqual(evaluate(root, '[false, true] or zip any [1, "s", False]'), any([True, True]))
        self.assertEqual(evaluate(root, '[false, true] zip any or [0, nan, ""]'), any([False, True]))
        self.assertEqual(evaluate(root, '[false, true] or zip any [0, nan, ""]'), any([False, True]))
        self.assertEqual(evaluate(root, '["", true] zip any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '["", true] or zip any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '["", true] zip any or [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '["", true] or zip any [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '["", true] zip any or [1, nan, "s", ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '["", true] or zip any [1, nan, "s", ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '["", true] zip any or [1, "s", False]'), any([True, True]))
        self.assertEqual(evaluate(root, '["", true] or zip any [1, "s", False]'), any([True, True]))
        self.assertEqual(evaluate(root, '["", true] zip any or [0, nan, ""]'), any([False, True]))
        self.assertEqual(evaluate(root, '["", true] or zip any [0, nan, ""]'), any([False, True]))
        self.assertEqual(evaluate(root, '[0, true] zip any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[0, true] or zip any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[0, true] zip any or [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '[0, true] or zip any [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '[0, true] zip any or [1, nan, "s", ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '[0, true] or zip any [1, nan, "s", ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '[0, true] zip any or [1, "s", true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[0, true] or zip any [1, "s", true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[0, true] zip any or [0, nan, ""]'), any([False, True]))
        self.assertEqual(evaluate(root, '[0, true] or zip any [0, nan, ""]'), any([False, True]))
        self.assertEqual(evaluate(root, '[nan, true] zip any or [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or zip any [true, true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[nan, true] zip any or [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or zip any [true, false]'), any([True, True]))
        self.assertEqual(evaluate(root, '[nan, true] zip any or [1, nan, "s", ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or zip any [1, nan, "s", ""]'), any([True, True]))
        self.assertEqual(evaluate(root, '[nan, true] zip any or [1, "s", true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or zip any [1, "s", true]'), any([True, True]))
        self.assertEqual(evaluate(root, '[nan, true] zip any or [0, nan, ""]'), any([False, True]))
        self.assertEqual(evaluate(root, '[nan, true] or zip any [0, nan, ""]'), any([False, True]))
        # empty
        self.assertEqual(evaluate(root, '[true, true] zip any or []'), any([]))
        self.assertEqual(evaluate(root, '[true, true] or zip any []'), any([]))

    def test_must_apply_or_seq_vs_seq_using_zip_all(self):
        root = {}
        # lhs coerces to true
        self.assertEqual(evaluate(root, '[true, true] zip all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] zip all or [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip all [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] zip all or [1, nan, "s", ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip all [1, nan, "s", ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] zip all or [1, "s", true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip all [1, "s", true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] zip all or [0, nan, ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '[true, true] or zip all [0, nan, ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '["a", true] zip all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '["a", true] or zip all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '["a", true] zip all or [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '["a", true] or zip all [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '["a", true] zip all or [1, nan, "s", ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '["a", true] or zip all [1, nan, "s", ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '["a", true] zip all or [1, "s", true]'), all([True, True]))
        self.assertEqual(evaluate(root, '["a", true] or zip all [1, "s", true]'), all([True, True]))
        self.assertEqual(evaluate(root, '["a", true] zip all or [0, nan, ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '["a", true] or zip all [0, nan, ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '[1, true] zip all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[1, true] or zip all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[1, true] zip all or [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '[1, true] or zip all [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '[1, true] zip all or [1, nan, "s", ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '[1, true] or zip all [1, nan, "s", ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '[1, true] zip all or [1, "s", true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[1, true] or zip all [1, "s", true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[1, true] zip all or [0, nan, ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '[1, true] or zip all [0, nan, ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] zip all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or zip all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] zip all or [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or zip all [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] zip all or [1, nan, "s", ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or zip all [1, nan, "s", ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] zip all or [1, "s", true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or zip all [1, "s", true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] zip all or [0, nan, ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or zip all [0, nan, ""]'), all([True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(root, '[false, true] zip all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[false, true] or zip all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[false, true] zip all or [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '[false, true] or zip all [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '[false, true] zip all or [1, nan, "s", ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '[false, true] or zip all [1, nan, "s", ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '[false, true] zip all or [1, "s", False]'), all([True, True]))
        self.assertEqual(evaluate(root, '[false, true] or zip all [1, "s", False]'), all([True, True]))
        self.assertEqual(evaluate(root, '[false, true] zip all or [0, nan, ""]'), all([False, True]))
        self.assertEqual(evaluate(root, '[false, true] or zip all [0, nan, ""]'), all([False, True]))
        self.assertEqual(evaluate(root, '["", true] zip all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '["", true] or zip all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '["", true] zip all or [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '["", true] or zip all [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '["", true] zip all or [1, nan, "s", ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '["", true] or zip all [1, nan, "s", ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '["", true] zip all or [1, "s", False]'), all([True, True]))
        self.assertEqual(evaluate(root, '["", true] or zip all [1, "s", False]'), all([True, True]))
        self.assertEqual(evaluate(root, '["", true] zip all or [0, nan, ""]'), all([False, True]))
        self.assertEqual(evaluate(root, '["", true] or zip all [0, nan, ""]'), all([False, True]))
        self.assertEqual(evaluate(root, '[0, true] zip all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[0, true] or zip all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[0, true] zip all or [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '[0, true] or zip all [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '[0, true] zip all or [1, nan, "s", ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '[0, true] or zip all [1, nan, "s", ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '[0, true] zip all or [1, "s", true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[0, true] or zip all [1, "s", true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[0, true] zip all or [0, nan, ""]'), all([False, True]))
        self.assertEqual(evaluate(root, '[0, true] or zip all [0, nan, ""]'), all([False, True]))
        self.assertEqual(evaluate(root, '[nan, true] zip all or [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or zip all [true, true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[nan, true] zip all or [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or zip all [true, false]'), all([True, True]))
        self.assertEqual(evaluate(root, '[nan, true] zip all or [1, nan, "s", ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or zip all [1, nan, "s", ""]'), all([True, True]))
        self.assertEqual(evaluate(root, '[nan, true] zip all or [1, "s", true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or zip all [1, "s", true]'), all([True, True]))
        self.assertEqual(evaluate(root, '[nan, true] zip all or [0, nan, ""]'), all([False, True]))
        self.assertEqual(evaluate(root, '[nan, true] or zip all [0, nan, ""]'), all([False, True]))
        # empty
        self.assertEqual(evaluate(root, '[true, true] zip all or []'), all([]))
        self.assertEqual(evaluate(root, '[true, true] or zip all []'), all([]))

    def test_must_apply_or_seq_vs_seq_product_sequence(self):
        root = {}
        # lhs coerces to true
        self.assertEqual(evaluate(root, '[true, true] product sequence or [true, true]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[true, true] or product sequence [true, true]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[true, true] product sequence or [true, false]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[true, true] or product sequence [true, false]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[true, true] product sequence or [1, nan, "s", ""]'), [True, True, True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[true, true] or product sequence [1, nan, "s", ""]'), [True, True, True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[true, true] product sequence or [1, "s", true]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[true, true] or product sequence [1, "s", true]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[true, true] product sequence or [0, nan, ""]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[true, true] or product sequence [0, nan, ""]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '["a", true] product sequence or [true, true]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '["a", true] or product sequence [true, true]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '["a", true] product sequence or [true, false]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '["a", true] or product sequence [true, false]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '["a", true] product sequence or [1, nan, "s", ""]'), [True, True, True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '["a", true] or product sequence [1, nan, "s", ""]'), [True, True, True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '["a", true] product sequence or [1, "s", true]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '["a", true] or product sequence [1, "s", true]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '["a", true] product sequence or [0, nan, ""]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '["a", true] or product sequence [0, nan, ""]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[1, true] product sequence or [true, true]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1, true] or product sequence [true, true]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1, true] product sequence or [true, false]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1, true] or product sequence [true, false]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1, true] product sequence or [1, nan, "s", ""]'), [True, True, True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[1, true] or product sequence [1, nan, "s", ""]'), [True, True, True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[1, true] product sequence or [1, "s", true]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[1, true] or product sequence [1, "s", true]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[1, true] product sequence or [0, nan, ""]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[1, true] or product sequence [0, nan, ""]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[1.5, true] product sequence or [true, true]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1.5, true] or product sequence [true, true]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1.5, true] product sequence or [true, false]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1.5, true] or product sequence [true, false]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[1.5, true] product sequence or [1, nan, "s", ""]'), [True, True, True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[1.5, true] or product sequence [1, nan, "s", ""]'), [True, True, True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[1.5, true] product sequence or [1, "s", true]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[1.5, true] or product sequence [1, "s", true]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[1.5, true] product sequence or [0, nan, ""]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[1.5, true] or product sequence [0, nan, ""]'), [True, True, True, True, True, True])
        # lhs coerces to false
        self.assertEqual(evaluate(root, '[false, true] product sequence or [true, true]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[false, true] or product sequence [true, true]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[false, true] product sequence or [true, false]'), [True, False, True, True])
        self.assertEqual(evaluate(root, '[false, true] or product sequence [true, false]'), [True, False, True, True])
        self.assertEqual(evaluate(root, '[false, true] product sequence or [1, nan, "s", ""]'), [True, False, True, False, True, True, True, True])
        self.assertEqual(evaluate(root, '[false, true] or product sequence [1, nan, "s", ""]'), [True, False, True, False, True, True, True, True])
        self.assertEqual(evaluate(root, '[false, true] product sequence or [1, "s", False]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[false, true] or product sequence [1, "s", False]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[false, true] product sequence or [0, nan, ""]'), [False, False, False, True, True, True])
        self.assertEqual(evaluate(root, '[false, true] or product sequence [0, nan, ""]'), [False, False, False, True, True, True])
        self.assertEqual(evaluate(root, '["", true] product sequence or [true, true]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '["", true] or product sequence [true, true]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '["", true] product sequence or [true, false]'), [True, False, True, True])
        self.assertEqual(evaluate(root, '["", true] or product sequence [true, false]'), [True, False, True, True])
        self.assertEqual(evaluate(root, '["", true] product sequence or [1, nan, "s", ""]'), [True, False, True, False, True, True, True, True])
        self.assertEqual(evaluate(root, '["", true] or product sequence [1, nan, "s", ""]'), [True, False, True, False, True, True, True, True])
        self.assertEqual(evaluate(root, '["", true] product sequence or [1, "s", False]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '["", true] or product sequence [1, "s", False]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '["", true] product sequence or [0, nan, ""]'), [False, False, False, True, True, True])
        self.assertEqual(evaluate(root, '["", true] or product sequence [0, nan, ""]'), [False, False, False, True, True, True])
        self.assertEqual(evaluate(root, '[0, true] product sequence or [true, true]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[0, true] or product sequence [true, true]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[0, true] product sequence or [true, false]'), [True, False, True, True])
        self.assertEqual(evaluate(root, '[0, true] or product sequence [true, false]'), [True, False, True, True])
        self.assertEqual(evaluate(root, '[0, true] product sequence or [1, nan, "s", ""]'), [True, False, True, False, True, True, True, True])
        self.assertEqual(evaluate(root, '[0, true] or product sequence [1, nan, "s", ""]'), [True, False, True, False, True, True, True, True])
        self.assertEqual(evaluate(root, '[0, true] product sequence or [1, "s", true]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[0, true] or product sequence [1, "s", true]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[0, true] product sequence or [0, nan, ""]'), [False, False, False, True, True, True])
        self.assertEqual(evaluate(root, '[0, true] or product sequence [0, nan, ""]'), [False, False, False, True, True, True])
        self.assertEqual(evaluate(root, '[nan, true] product sequence or [true, true]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[nan, true] or product sequence [true, true]'), [True, True, True, True])
        self.assertEqual(evaluate(root, '[nan, true] product sequence or [true, false]'), [True, False, True, True])
        self.assertEqual(evaluate(root, '[nan, true] or product sequence [true, false]'), [True, False, True, True])
        self.assertEqual(evaluate(root, '[nan, true] product sequence or [1, nan, "s", ""]'), [True, False, True, False, True, True, True, True])
        self.assertEqual(evaluate(root, '[nan, true] or product sequence [1, nan, "s", ""]'), [True, False, True, False, True, True, True, True])
        self.assertEqual(evaluate(root, '[nan, true] product sequence or [1, "s", true]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[nan, true] or product sequence [1, "s", true]'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(root, '[nan, true] product sequence or [0, nan, ""]'),[False, False, False, True, True, True])
        self.assertEqual(evaluate(root, '[nan, true] or product sequence [0, nan, ""]'),[False, False, False, True, True, True])
        # empty
        self.assertEqual(evaluate(root, '[true, true] product sequence or []'), [])
        self.assertEqual(evaluate(root, '[true, true] or product sequence []'), [])

    def test_must_apply_or_seq_vs_seq_product_any(self):
        root = {}
        # lhs coerces to true
        self.assertEqual(evaluate(root, '[true, true] product any or [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product any [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] product any or [true, false]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product any [true, false]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] product any or [1, nan, "s", ""]'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product any [1, nan, "s", ""]'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] product any or [1, "s", true]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product any [1, "s", true]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] product any or [0, nan, ""]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product any [0, nan, ""]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] product any or [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] or product any [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] product any or [true, false]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] or product any [true, false]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] product any or [1, nan, "s", ""]'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] or product any [1, nan, "s", ""]'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] product any or [1, "s", true]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] or product any [1, "s", true]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] product any or [0, nan, ""]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] or product any [0, nan, ""]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] product any or [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] or product any [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] product any or [true, false]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] or product any [true, false]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] product any or [1, nan, "s", ""]'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] or product any [1, nan, "s", ""]'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] product any or [1, "s", true]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] or product any [1, "s", true]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] product any or [0, nan, ""]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] or product any [0, nan, ""]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] product any or [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or product any [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] product any or [true, false]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or product any [true, false]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] product any or [1, nan, "s", ""]'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or product any [1, nan, "s", ""]'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] product any or [1, "s", true]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or product any [1, "s", true]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] product any or [0, nan, ""]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or product any [0, nan, ""]'), any([True, True, True, True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(root, '[false, true] product any or [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[false, true] or product any [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[false, true] product any or [true, false]'), any([True, False, True, True]))
        self.assertEqual(evaluate(root, '[false, true] or product any [true, false]'), any([True, False, True, True]))
        self.assertEqual(evaluate(root, '[false, true] product any or [1, nan, "s", ""]'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(root, '[false, true] or product any [1, nan, "s", ""]'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(root, '[false, true] product any or [1, "s", False]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[false, true] or product any [1, "s", False]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[false, true] product any or [0, nan, ""]'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(root, '[false, true] or product any [0, nan, ""]'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(root, '["", true] product any or [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '["", true] or product any [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '["", true] product any or [true, false]'), any([True, False, True, True]))
        self.assertEqual(evaluate(root, '["", true] or product any [true, false]'), any([True, False, True, True]))
        self.assertEqual(evaluate(root, '["", true] product any or [1, nan, "s", ""]'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(root, '["", true] or product any [1, nan, "s", ""]'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(root, '["", true] product any or [1, "s", False]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '["", true] or product any [1, "s", False]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '["", true] product any or [0, nan, ""]'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(root, '["", true] or product any [0, nan, ""]'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(root, '[0, true] product any or [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[0, true] or product any [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[0, true] product any or [true, false]'), any([True, False, True, True]))
        self.assertEqual(evaluate(root, '[0, true] or product any [true, false]'), any([True, False, True, True]))
        self.assertEqual(evaluate(root, '[0, true] product any or [1, nan, "s", ""]'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(root, '[0, true] or product any [1, nan, "s", ""]'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(root, '[0, true] product any or [1, "s", true]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[0, true] or product any [1, "s", true]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[0, true] product any or [0, nan, ""]'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(root, '[0, true] or product any [0, nan, ""]'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] product any or [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or product any [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] product any or [true, false]'), any([True, False, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or product any [true, false]'), any([True, False, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] product any or [1, nan, "s", ""]'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or product any [1, nan, "s", ""]'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] product any or [1, "s", true]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or product any [1, "s", true]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] product any or [0, nan, ""]'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or product any [0, nan, ""]'), any([False, False, False, True, True, True]))
        # empty
        self.assertEqual(evaluate(root, '[true, true] product any or []'), any([]))
        self.assertEqual(evaluate(root, '[true, true] or product any []'), any([]))

    def test_must_apply_or_seq_vs_seq_product_all(self):
        root = {}
        # lhs coerces to true
        self.assertEqual(evaluate(root, '[true, true] product all or [true, true]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product all [true, true]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] product all or [true, false]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product all [true, false]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] product all or [1, nan, "s", ""]'), all([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product all [1, nan, "s", ""]'), all([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] product all or [1, "s", true]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product all [1, "s", true]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] product all or [0, nan, ""]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] or product all [0, nan, ""]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] product all or [true, true]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] or product all [true, true]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] product all or [true, false]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] or product all [true, false]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] product all or [1, nan, "s", ""]'), all([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] or product all [1, nan, "s", ""]'), all([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] product all or [1, "s", true]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] or product all [1, "s", true]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] product all or [0, nan, ""]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] or product all [0, nan, ""]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] product all or [true, true]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] or product all [true, true]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] product all or [true, false]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] or product all [true, false]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] product all or [1, nan, "s", ""]'), all([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] or product all [1, nan, "s", ""]'), all([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] product all or [1, "s", true]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] or product all [1, "s", true]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] product all or [0, nan, ""]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] or product all [0, nan, ""]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] product all or [true, true]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or product all [true, true]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] product all or [true, false]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or product all [true, false]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] product all or [1, nan, "s", ""]'), all([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or product all [1, nan, "s", ""]'), all([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] product all or [1, "s", true]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or product all [1, "s", true]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] product all or [0, nan, ""]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or product all [0, nan, ""]'), all([True, True, True, True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(root, '[false, true] product all or [true, true]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[false, true] or product all [true, true]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[false, true] product all or [true, false]'), all([True, False, True, True]))
        self.assertEqual(evaluate(root, '[false, true] or product all [true, false]'), all([True, False, True, True]))
        self.assertEqual(evaluate(root, '[false, true] product all or [1, nan, "s", ""]'), all([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(root, '[false, true] or product all [1, nan, "s", ""]'), all([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(root, '[false, true] product all or [1, "s", False]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[false, true] or product all [1, "s", False]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[false, true] product all or [0, nan, ""]'), all([False, False, False, True, True, True]))
        self.assertEqual(evaluate(root, '[false, true] or product all [0, nan, ""]'), all([False, False, False, True, True, True]))
        self.assertEqual(evaluate(root, '["", true] product all or [true, true]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '["", true] or product all [true, true]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '["", true] product all or [true, false]'), all([True, False, True, True]))
        self.assertEqual(evaluate(root, '["", true] or product all [true, false]'), all([True, False, True, True]))
        self.assertEqual(evaluate(root, '["", true] product all or [1, nan, "s", ""]'), all([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(root, '["", true] or product all [1, nan, "s", ""]'), all([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(root, '["", true] product all or [1, "s", False]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '["", true] or product all [1, "s", False]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '["", true] product all or [0, nan, ""]'), all([False, False, False, True, True, True]))
        self.assertEqual(evaluate(root, '["", true] or product all [0, nan, ""]'), all([False, False, False, True, True, True]))
        self.assertEqual(evaluate(root, '[0, true] product all or [true, true]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[0, true] or product all [true, true]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[0, true] product all or [true, false]'), all([True, False, True, True]))
        self.assertEqual(evaluate(root, '[0, true] or product all [true, false]'), all([True, False, True, True]))
        self.assertEqual(evaluate(root, '[0, true] product all or [1, nan, "s", ""]'), all([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(root, '[0, true] or product all [1, nan, "s", ""]'), all([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(root, '[0, true] product all or [1, "s", true]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[0, true] or product all [1, "s", true]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[0, true] product all or [0, nan, ""]'), all([False, False, False, True, True, True]))
        self.assertEqual(evaluate(root, '[0, true] or product all [0, nan, ""]'), all([False, False, False, True, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] product all or [true, true]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or product all [true, true]'), all([True, True, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] product all or [true, false]'), all([True, False, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or product all [true, false]'), all([True, False, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] product all or [1, nan, "s", ""]'), all([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or product all [1, nan, "s", ""]'), all([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] product all or [1, "s", true]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or product all [1, "s", true]'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] product all or [0, nan, ""]'), all([False, False, False, True, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or product all [0, nan, ""]'), all([False, False, False, True, True, True]))
        # empty
        self.assertEqual(evaluate(root, '[true, true] product all or []'), all([]))
        self.assertEqual(evaluate(root, '[true, true] or product all []'), all([]))

    def test_must_apply_or_seq_vs_seq(self):  # equiv to product any
        root = {}
        # lhs coerces to true
        self.assertEqual(evaluate(root, '[true, true] or [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] or [true, false]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] or [1, nan, "s", ""]'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] or [1, "s", true]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[true, true] or [0, nan, ""]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] or [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] or [true, false]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] or [1, nan, "s", ""]'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] or [1, "s", true]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '["a", true] or [0, nan, ""]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] or [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] or [true, false]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] or [1, nan, "s", ""]'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] or [1, "s", true]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1, true] or [0, nan, ""]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or [true, false]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or [1, nan, "s", ""]'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or [1, "s", true]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[1.5, true] or [0, nan, ""]'), any([True, True, True, True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(root, '[false, true] or [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[false, true] or [true, false]'), any([True, False, True, True]))
        self.assertEqual(evaluate(root, '[false, true] or [1, nan, "s", ""]'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(root, '[false, true] or [1, "s", False]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[false, true] or [0, nan, ""]'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(root, '["", true] or [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '["", true] or [true, false]'), any([True, False, True, True]))
        self.assertEqual(evaluate(root, '["", true] or [1, nan, "s", ""]'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(root, '["", true] or [1, "s", False]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '["", true] or [0, nan, ""]'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(root, '[0, true] or [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[0, true] or [true, false]'), any([True, False, True, True]))
        self.assertEqual(evaluate(root, '[0, true] or [1, nan, "s", ""]'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(root, '[0, true] or [1, "s", true]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[0, true] or [0, nan, ""]'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or [true, true]'), any([True, True, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or [true, false]'), any([True, False, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or [1, nan, "s", ""]'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or [1, "s", true]'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(root, '[nan, true] or [0, nan, ""]'), any([False, False, False, True, True, True]))
        # empty
        self.assertEqual(evaluate(root, '[true, true] or []'), any([]))


if __name__ == '__main__':
    unittest.main()
