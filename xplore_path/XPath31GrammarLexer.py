# Generated from XPath31Grammar.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,72,591,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
        78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,
        10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,
        15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,
        20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,
        26,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,
        29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
        29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,
        32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,
        42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,
        44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,
        46,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,
        49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,
        52,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,
        53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,
        56,1,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,58,1,
        58,1,58,1,58,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,
        61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,
        65,1,66,1,66,1,66,1,66,1,66,5,66,493,8,66,10,66,12,66,496,9,66,3,
        66,498,8,66,1,67,1,67,1,67,1,67,1,67,5,67,505,8,67,10,67,12,67,508,
        9,67,3,67,510,8,67,3,67,512,8,67,1,67,1,67,3,67,516,8,67,1,67,1,
        67,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,531,
        8,69,1,70,1,70,1,70,5,70,536,8,70,10,70,12,70,539,9,70,1,70,1,70,
        1,70,1,70,5,70,545,8,70,10,70,12,70,548,9,70,1,70,3,70,551,8,70,
        1,71,1,71,1,71,1,72,1,72,1,72,1,73,1,73,1,74,1,74,1,75,4,75,564,
        8,75,11,75,12,75,565,1,76,1,76,1,77,1,77,1,78,1,78,3,78,574,8,78,
        1,79,1,79,5,79,578,8,79,10,79,12,79,581,9,79,1,80,1,80,1,81,4,81,
        586,8,81,11,81,12,81,587,1,81,1,81,0,0,82,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,
        101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,
        60,121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,
        139,70,141,0,143,0,145,0,147,71,149,0,151,0,153,0,155,0,157,0,159,
        0,161,0,163,72,1,0,9,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,
        1,0,34,34,1,0,39,39,15,0,65,90,95,95,97,122,192,214,216,246,248,
        767,880,893,895,8191,8204,8205,8304,8591,11264,12271,12289,55295,
        63744,64975,65008,65533,65536,983039,5,0,45,46,48,57,183,183,768,
        879,8255,8256,5,0,9,10,13,13,32,55295,57344,65533,65536,1114111,
        3,0,9,10,13,13,32,32,596,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
        1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
        1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,
        107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,
        0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,
        1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,
        0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,147,1,0,0,0,0,163,1,
        0,0,0,1,165,1,0,0,0,3,167,1,0,0,0,5,169,1,0,0,0,7,171,1,0,0,0,9,
        173,1,0,0,0,11,176,1,0,0,0,13,178,1,0,0,0,15,180,1,0,0,0,17,182,
        1,0,0,0,19,185,1,0,0,0,21,187,1,0,0,0,23,189,1,0,0,0,25,192,1,0,
        0,0,27,195,1,0,0,0,29,197,1,0,0,0,31,200,1,0,0,0,33,203,1,0,0,0,
        35,205,1,0,0,0,37,207,1,0,0,0,39,210,1,0,0,0,41,212,1,0,0,0,43,214,
        1,0,0,0,45,216,1,0,0,0,47,218,1,0,0,0,49,220,1,0,0,0,51,222,1,0,
        0,0,53,224,1,0,0,0,55,227,1,0,0,0,57,229,1,0,0,0,59,238,1,0,0,0,
        61,255,1,0,0,0,63,259,1,0,0,0,65,265,1,0,0,0,67,276,1,0,0,0,69,295,
        1,0,0,0,71,299,1,0,0,0,73,306,1,0,0,0,75,316,1,0,0,0,77,334,1,0,
        0,0,79,339,1,0,0,0,81,342,1,0,0,0,83,352,1,0,0,0,85,356,1,0,0,0,
        87,359,1,0,0,0,89,366,1,0,0,0,91,376,1,0,0,0,93,394,1,0,0,0,95,399,
        1,0,0,0,97,402,1,0,0,0,99,408,1,0,0,0,101,412,1,0,0,0,103,416,1,
        0,0,0,105,420,1,0,0,0,107,428,1,0,0,0,109,437,1,0,0,0,111,440,1,
        0,0,0,113,446,1,0,0,0,115,454,1,0,0,0,117,459,1,0,0,0,119,463,1,
        0,0,0,121,467,1,0,0,0,123,473,1,0,0,0,125,476,1,0,0,0,127,479,1,
        0,0,0,129,482,1,0,0,0,131,485,1,0,0,0,133,497,1,0,0,0,135,511,1,
        0,0,0,137,519,1,0,0,0,139,530,1,0,0,0,141,550,1,0,0,0,143,552,1,
        0,0,0,145,555,1,0,0,0,147,558,1,0,0,0,149,560,1,0,0,0,151,563,1,
        0,0,0,153,567,1,0,0,0,155,569,1,0,0,0,157,573,1,0,0,0,159,575,1,
        0,0,0,161,582,1,0,0,0,163,585,1,0,0,0,165,166,5,33,0,0,166,2,1,0,
        0,0,167,168,5,93,0,0,168,4,1,0,0,0,169,170,5,125,0,0,170,6,1,0,0,
        0,171,172,5,58,0,0,172,8,1,0,0,0,173,174,5,58,0,0,174,175,5,58,0,
        0,175,10,1,0,0,0,176,177,5,44,0,0,177,12,1,0,0,0,178,179,5,41,0,
        0,179,14,1,0,0,0,180,181,5,46,0,0,181,16,1,0,0,0,182,183,5,46,0,
        0,183,184,5,46,0,0,184,18,1,0,0,0,185,186,5,36,0,0,186,20,1,0,0,
        0,187,188,5,61,0,0,188,22,1,0,0,0,189,190,5,62,0,0,190,191,5,61,
        0,0,191,24,1,0,0,0,192,193,5,62,0,0,193,194,5,62,0,0,194,26,1,0,
        0,0,195,196,5,62,0,0,196,28,1,0,0,0,197,198,5,60,0,0,198,199,5,61,
        0,0,199,30,1,0,0,0,200,201,5,60,0,0,201,202,5,60,0,0,202,32,1,0,
        0,0,203,204,5,60,0,0,204,34,1,0,0,0,205,206,5,45,0,0,206,36,1,0,
        0,0,207,208,5,33,0,0,208,209,5,61,0,0,209,38,1,0,0,0,210,211,5,91,
        0,0,211,40,1,0,0,0,212,213,5,123,0,0,213,42,1,0,0,0,214,215,5,40,
        0,0,215,44,1,0,0,0,216,217,5,124,0,0,217,46,1,0,0,0,218,219,5,43,
        0,0,219,48,1,0,0,0,220,221,5,63,0,0,221,50,1,0,0,0,222,223,5,47,
        0,0,223,52,1,0,0,0,224,225,5,47,0,0,225,226,5,47,0,0,226,54,1,0,
        0,0,227,228,5,42,0,0,228,56,1,0,0,0,229,230,5,97,0,0,230,231,5,110,
        0,0,231,232,5,99,0,0,232,233,5,101,0,0,233,234,5,115,0,0,234,235,
        5,116,0,0,235,236,5,111,0,0,236,237,5,114,0,0,237,58,1,0,0,0,238,
        239,5,97,0,0,239,240,5,110,0,0,240,241,5,99,0,0,241,242,5,101,0,
        0,242,243,5,115,0,0,243,244,5,116,0,0,244,245,5,111,0,0,245,246,
        5,114,0,0,246,247,5,45,0,0,247,248,5,111,0,0,248,249,5,114,0,0,249,
        250,5,45,0,0,250,251,5,115,0,0,251,252,5,101,0,0,252,253,5,108,0,
        0,253,254,5,102,0,0,254,60,1,0,0,0,255,256,5,97,0,0,256,257,5,110,
        0,0,257,258,5,100,0,0,258,62,1,0,0,0,259,260,5,99,0,0,260,261,5,
        104,0,0,261,262,5,105,0,0,262,263,5,108,0,0,263,264,5,100,0,0,264,
        64,1,0,0,0,265,266,5,100,0,0,266,267,5,101,0,0,267,268,5,115,0,0,
        268,269,5,99,0,0,269,270,5,101,0,0,270,271,5,110,0,0,271,272,5,100,
        0,0,272,273,5,97,0,0,273,274,5,110,0,0,274,275,5,116,0,0,275,66,
        1,0,0,0,276,277,5,100,0,0,277,278,5,101,0,0,278,279,5,115,0,0,279,
        280,5,99,0,0,280,281,5,101,0,0,281,282,5,110,0,0,282,283,5,100,0,
        0,283,284,5,97,0,0,284,285,5,110,0,0,285,286,5,116,0,0,286,287,5,
        45,0,0,287,288,5,111,0,0,288,289,5,114,0,0,289,290,5,45,0,0,290,
        291,5,115,0,0,291,292,5,101,0,0,292,293,5,108,0,0,293,294,5,102,
        0,0,294,68,1,0,0,0,295,296,5,100,0,0,296,297,5,105,0,0,297,298,5,
        118,0,0,298,70,1,0,0,0,299,300,5,101,0,0,300,301,5,120,0,0,301,302,
        5,99,0,0,302,303,5,101,0,0,303,304,5,112,0,0,304,305,5,116,0,0,305,
        72,1,0,0,0,306,307,5,102,0,0,307,308,5,111,0,0,308,309,5,108,0,0,
        309,310,5,108,0,0,310,311,5,111,0,0,311,312,5,119,0,0,312,313,5,
        105,0,0,313,314,5,110,0,0,314,315,5,103,0,0,315,74,1,0,0,0,316,317,
        5,102,0,0,317,318,5,111,0,0,318,319,5,108,0,0,319,320,5,108,0,0,
        320,321,5,111,0,0,321,322,5,119,0,0,322,323,5,105,0,0,323,324,5,
        110,0,0,324,325,5,103,0,0,325,326,5,45,0,0,326,327,5,115,0,0,327,
        328,5,105,0,0,328,329,5,98,0,0,329,330,5,108,0,0,330,331,5,105,0,
        0,331,332,5,110,0,0,332,333,5,103,0,0,333,76,1,0,0,0,334,335,5,105,
        0,0,335,336,5,100,0,0,336,337,5,105,0,0,337,338,5,118,0,0,338,78,
        1,0,0,0,339,340,5,105,0,0,340,341,5,110,0,0,341,80,1,0,0,0,342,343,
        5,105,0,0,343,344,5,110,0,0,344,345,5,116,0,0,345,346,5,101,0,0,
        346,347,5,114,0,0,347,348,5,115,0,0,348,349,5,101,0,0,349,350,5,
        99,0,0,350,351,5,116,0,0,351,82,1,0,0,0,352,353,5,109,0,0,353,354,
        5,111,0,0,354,355,5,100,0,0,355,84,1,0,0,0,356,357,5,111,0,0,357,
        358,5,114,0,0,358,86,1,0,0,0,359,360,5,112,0,0,360,361,5,97,0,0,
        361,362,5,114,0,0,362,363,5,101,0,0,363,364,5,110,0,0,364,365,5,
        116,0,0,365,88,1,0,0,0,366,367,5,112,0,0,367,368,5,114,0,0,368,369,
        5,101,0,0,369,370,5,99,0,0,370,371,5,101,0,0,371,372,5,100,0,0,372,
        373,5,105,0,0,373,374,5,110,0,0,374,375,5,103,0,0,375,90,1,0,0,0,
        376,377,5,112,0,0,377,378,5,114,0,0,378,379,5,101,0,0,379,380,5,
        99,0,0,380,381,5,101,0,0,381,382,5,100,0,0,382,383,5,105,0,0,383,
        384,5,110,0,0,384,385,5,103,0,0,385,386,5,45,0,0,386,387,5,115,0,
        0,387,388,5,105,0,0,388,389,5,98,0,0,389,390,5,108,0,0,390,391,5,
        105,0,0,391,392,5,110,0,0,392,393,5,103,0,0,393,92,1,0,0,0,394,395,
        5,115,0,0,395,396,5,101,0,0,396,397,5,108,0,0,397,398,5,102,0,0,
        398,94,1,0,0,0,399,400,5,116,0,0,400,401,5,111,0,0,401,96,1,0,0,
        0,402,403,5,117,0,0,403,404,5,110,0,0,404,405,5,105,0,0,405,406,
        5,111,0,0,406,407,5,110,0,0,407,98,1,0,0,0,408,409,5,97,0,0,409,
        410,5,110,0,0,410,411,5,121,0,0,411,100,1,0,0,0,412,413,5,97,0,0,
        413,414,5,108,0,0,414,415,5,108,0,0,415,102,1,0,0,0,416,417,5,122,
        0,0,417,418,5,105,0,0,418,419,5,112,0,0,419,104,1,0,0,0,420,421,
        5,112,0,0,421,422,5,114,0,0,422,423,5,111,0,0,423,424,5,100,0,0,
        424,425,5,117,0,0,425,426,5,99,0,0,426,427,5,116,0,0,427,106,1,0,
        0,0,428,429,5,115,0,0,429,430,5,101,0,0,430,431,5,113,0,0,431,432,
        5,117,0,0,432,433,5,101,0,0,433,434,5,110,0,0,434,435,5,99,0,0,435,
        436,5,101,0,0,436,108,1,0,0,0,437,438,5,111,0,0,438,439,5,110,0,
        0,439,110,1,0,0,0,440,441,5,101,0,0,441,442,5,114,0,0,442,443,5,
        114,0,0,443,444,5,111,0,0,444,445,5,114,0,0,445,112,1,0,0,0,446,
        447,5,100,0,0,447,448,5,105,0,0,448,449,5,115,0,0,449,450,5,99,0,
        0,450,451,5,97,0,0,451,452,5,114,0,0,452,453,5,100,0,0,453,114,1,
        0,0,0,454,455,5,102,0,0,455,456,5,97,0,0,456,457,5,105,0,0,457,458,
        5,108,0,0,458,116,1,0,0,0,459,460,5,110,0,0,460,461,5,97,0,0,461,
        462,5,110,0,0,462,118,1,0,0,0,463,464,5,105,0,0,464,465,5,110,0,
        0,465,466,5,102,0,0,466,120,1,0,0,0,467,468,5,108,0,0,468,469,5,
        97,0,0,469,470,5,98,0,0,470,471,5,101,0,0,471,472,5,108,0,0,472,
        122,1,0,0,0,473,474,5,114,0,0,474,475,3,141,70,0,475,124,1,0,0,0,
        476,477,5,103,0,0,477,478,3,141,70,0,478,126,1,0,0,0,479,480,5,115,
        0,0,480,481,3,141,70,0,481,128,1,0,0,0,482,483,5,102,0,0,483,484,
        3,141,70,0,484,130,1,0,0,0,485,486,3,151,75,0,486,132,1,0,0,0,487,
        488,5,46,0,0,488,498,3,151,75,0,489,490,3,151,75,0,490,494,5,46,
        0,0,491,493,7,0,0,0,492,491,1,0,0,0,493,496,1,0,0,0,494,492,1,0,
        0,0,494,495,1,0,0,0,495,498,1,0,0,0,496,494,1,0,0,0,497,487,1,0,
        0,0,497,489,1,0,0,0,498,134,1,0,0,0,499,500,5,46,0,0,500,512,3,151,
        75,0,501,509,3,151,75,0,502,506,5,46,0,0,503,505,7,0,0,0,504,503,
        1,0,0,0,505,508,1,0,0,0,506,504,1,0,0,0,506,507,1,0,0,0,507,510,
        1,0,0,0,508,506,1,0,0,0,509,502,1,0,0,0,509,510,1,0,0,0,510,512,
        1,0,0,0,511,499,1,0,0,0,511,501,1,0,0,0,512,513,1,0,0,0,513,515,
        7,1,0,0,514,516,7,2,0,0,515,514,1,0,0,0,515,516,1,0,0,0,516,517,
        1,0,0,0,517,518,3,151,75,0,518,136,1,0,0,0,519,520,3,141,70,0,520,
        138,1,0,0,0,521,522,5,116,0,0,522,523,5,114,0,0,523,524,5,117,0,
        0,524,531,5,101,0,0,525,526,5,102,0,0,526,527,5,97,0,0,527,528,5,
        108,0,0,528,529,5,115,0,0,529,531,5,101,0,0,530,521,1,0,0,0,530,
        525,1,0,0,0,531,140,1,0,0,0,532,537,5,34,0,0,533,536,8,3,0,0,534,
        536,3,143,71,0,535,533,1,0,0,0,535,534,1,0,0,0,536,539,1,0,0,0,537,
        535,1,0,0,0,537,538,1,0,0,0,538,540,1,0,0,0,539,537,1,0,0,0,540,
        551,5,34,0,0,541,546,5,39,0,0,542,545,8,4,0,0,543,545,3,145,72,0,
        544,542,1,0,0,0,544,543,1,0,0,0,545,548,1,0,0,0,546,544,1,0,0,0,
        546,547,1,0,0,0,547,549,1,0,0,0,548,546,1,0,0,0,549,551,5,39,0,0,
        550,532,1,0,0,0,550,541,1,0,0,0,551,142,1,0,0,0,552,553,5,34,0,0,
        553,554,5,34,0,0,554,144,1,0,0,0,555,556,5,39,0,0,556,557,5,39,0,
        0,557,146,1,0,0,0,558,559,3,159,79,0,559,148,1,0,0,0,560,561,3,161,
        80,0,561,150,1,0,0,0,562,564,7,0,0,0,563,562,1,0,0,0,564,565,1,0,
        0,0,565,563,1,0,0,0,565,566,1,0,0,0,566,152,1,0,0,0,567,568,3,149,
        74,0,568,154,1,0,0,0,569,570,7,5,0,0,570,156,1,0,0,0,571,574,3,155,
        77,0,572,574,7,6,0,0,573,571,1,0,0,0,573,572,1,0,0,0,574,158,1,0,
        0,0,575,579,3,155,77,0,576,578,3,157,78,0,577,576,1,0,0,0,578,581,
        1,0,0,0,579,577,1,0,0,0,579,580,1,0,0,0,580,160,1,0,0,0,581,579,
        1,0,0,0,582,583,7,7,0,0,583,162,1,0,0,0,584,586,7,8,0,0,585,584,
        1,0,0,0,586,587,1,0,0,0,587,585,1,0,0,0,587,588,1,0,0,0,588,589,
        1,0,0,0,589,590,6,81,0,0,590,164,1,0,0,0,17,0,494,497,506,509,511,
        515,530,535,537,544,546,550,565,573,579,587,1,6,0,0
    ]

class XPath31GrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    BANG = 1
    CB = 2
    CC = 3
    COLON = 4
    COLONCOLON = 5
    COMMA = 6
    CP = 7
    D = 8
    DD = 9
    DOLLAR = 10
    EQ = 11
    GE = 12
    GG = 13
    GT = 14
    LE = 15
    LL = 16
    LT = 17
    MINUS = 18
    NE = 19
    OB = 20
    OC = 21
    OP = 22
    P = 23
    PLUS = 24
    QM = 25
    SLASH = 26
    SS = 27
    STAR = 28
    KW_ANCESTOR = 29
    KW_ANCESTOR_OR_SELF = 30
    KW_AND = 31
    KW_CHILD = 32
    KW_DESCENDANT = 33
    KW_DESCENDANT_OR_SELF = 34
    KW_DIV = 35
    KW_EXCEPT = 36
    KW_FOLLOWING = 37
    KW_FOLLOWING_SIBLING = 38
    KW_IDIV = 39
    KW_IN = 40
    KW_INTERSECT = 41
    KW_MOD = 42
    KW_OR = 43
    KW_PARENT = 44
    KW_PRECEDING = 45
    KW_PRECEDING_SIBLING = 46
    KW_SELF = 47
    KW_TO = 48
    KW_UNION = 49
    KW_ANY = 50
    KW_ALL = 51
    KW_ZIP = 52
    KW_PRODUCT = 53
    KW_SEQUENCE = 54
    KW_ON = 55
    KW_ERROR = 56
    KW_DISCARD = 57
    KW_FAIL = 58
    KW_NAN = 59
    KW_INF = 60
    KW_LABEL = 61
    RegexMatcher = 62
    GlobMatcher = 63
    StrictMatcher = 64
    FuzzyMatcher = 65
    IntegerLiteral = 66
    DecimalLiteral = 67
    DoubleLiteral = 68
    StringLiteral = 69
    BooleanLiteral = 70
    Name = 71
    Whitespace = 72

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'!'", "']'", "'}'", "':'", "'::'", "','", "')'", "'.'", "'..'", 
            "'$'", "'='", "'>='", "'>>'", "'>'", "'<='", "'<<'", "'<'", 
            "'-'", "'!='", "'['", "'{'", "'('", "'|'", "'+'", "'?'", "'/'", 
            "'//'", "'*'", "'ancestor'", "'ancestor-or-self'", "'and'", 
            "'child'", "'descendant'", "'descendant-or-self'", "'div'", 
            "'except'", "'following'", "'following-sibling'", "'idiv'", 
            "'in'", "'intersect'", "'mod'", "'or'", "'parent'", "'preceding'", 
            "'preceding-sibling'", "'self'", "'to'", "'union'", "'any'", 
            "'all'", "'zip'", "'product'", "'sequence'", "'on'", "'error'", 
            "'discard'", "'fail'", "'nan'", "'inf'", "'label'" ]

    symbolicNames = [ "<INVALID>",
            "BANG", "CB", "CC", "COLON", "COLONCOLON", "COMMA", "CP", "D", 
            "DD", "DOLLAR", "EQ", "GE", "GG", "GT", "LE", "LL", "LT", "MINUS", 
            "NE", "OB", "OC", "OP", "P", "PLUS", "QM", "SLASH", "SS", "STAR", 
            "KW_ANCESTOR", "KW_ANCESTOR_OR_SELF", "KW_AND", "KW_CHILD", 
            "KW_DESCENDANT", "KW_DESCENDANT_OR_SELF", "KW_DIV", "KW_EXCEPT", 
            "KW_FOLLOWING", "KW_FOLLOWING_SIBLING", "KW_IDIV", "KW_IN", 
            "KW_INTERSECT", "KW_MOD", "KW_OR", "KW_PARENT", "KW_PRECEDING", 
            "KW_PRECEDING_SIBLING", "KW_SELF", "KW_TO", "KW_UNION", "KW_ANY", 
            "KW_ALL", "KW_ZIP", "KW_PRODUCT", "KW_SEQUENCE", "KW_ON", "KW_ERROR", 
            "KW_DISCARD", "KW_FAIL", "KW_NAN", "KW_INF", "KW_LABEL", "RegexMatcher", 
            "GlobMatcher", "StrictMatcher", "FuzzyMatcher", "IntegerLiteral", 
            "DecimalLiteral", "DoubleLiteral", "StringLiteral", "BooleanLiteral", 
            "Name", "Whitespace" ]

    ruleNames = [ "BANG", "CB", "CC", "COLON", "COLONCOLON", "COMMA", "CP", 
                  "D", "DD", "DOLLAR", "EQ", "GE", "GG", "GT", "LE", "LL", 
                  "LT", "MINUS", "NE", "OB", "OC", "OP", "P", "PLUS", "QM", 
                  "SLASH", "SS", "STAR", "KW_ANCESTOR", "KW_ANCESTOR_OR_SELF", 
                  "KW_AND", "KW_CHILD", "KW_DESCENDANT", "KW_DESCENDANT_OR_SELF", 
                  "KW_DIV", "KW_EXCEPT", "KW_FOLLOWING", "KW_FOLLOWING_SIBLING", 
                  "KW_IDIV", "KW_IN", "KW_INTERSECT", "KW_MOD", "KW_OR", 
                  "KW_PARENT", "KW_PRECEDING", "KW_PRECEDING_SIBLING", "KW_SELF", 
                  "KW_TO", "KW_UNION", "KW_ANY", "KW_ALL", "KW_ZIP", "KW_PRODUCT", 
                  "KW_SEQUENCE", "KW_ON", "KW_ERROR", "KW_DISCARD", "KW_FAIL", 
                  "KW_NAN", "KW_INF", "KW_LABEL", "RegexMatcher", "GlobMatcher", 
                  "StrictMatcher", "FuzzyMatcher", "IntegerLiteral", "DecimalLiteral", 
                  "DoubleLiteral", "StringLiteral", "BooleanLiteral", "FragStringLiteral", 
                  "FragEscapeQuot", "FragEscapeApos", "Name", "Char", "FragDigits", 
                  "CommentContents", "FragNameStartChar", "FragNameChar", 
                  "FragmentName", "FragChar", "Whitespace" ]

    grammarFileName = "XPath31Grammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


