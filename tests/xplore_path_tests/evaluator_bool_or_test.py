import unittest

from xplore_path.evaluator import Evaluator
from xplore_path.nodes.dummy.dummy_node import DummyNode
from xplore_path.nodes.python_object.python_object_node import PythonObjectNode


def evaluate(root, expr, variables = None):
    return Evaluator(variables).evaluate(root, expr)


class EvaluatorTest(unittest.TestCase):
    def test_must_apply_or_single_vs_single(self):
        self.assertEqual(evaluate(DummyNode(), 'true or true'), True)
        self.assertEqual(evaluate(DummyNode(), 'true or false'), True)
        self.assertEqual(evaluate(DummyNode(), 'false or true'), True)
        self.assertEqual(evaluate(DummyNode(), 'false or false'), False)

        self.assertEqual(evaluate(DummyNode(), 'a or true'), True)  # non-empty string coerces to true
        self.assertEqual(evaluate(DummyNode(), 'a or false'), True)  # non-empty string coerces to true
        self.assertEqual(evaluate(DummyNode(), 'true or a'), True)  # non-empty string coerces to true
        self.assertEqual(evaluate(DummyNode(), 'false or a'), True)  # non-empty string coerces to true

        self.assertEqual(evaluate(DummyNode(), '"" or true'), True)  # empty string coerces to false
        self.assertEqual(evaluate(DummyNode(), '"" or false'), False)  # empty string coerces to false
        self.assertEqual(evaluate(DummyNode(), 'true or ""'), True)  # empty string coerces to false
        self.assertEqual(evaluate(DummyNode(), 'false or ""'), False)  # empty string coerces to false

        self.assertEqual(evaluate(DummyNode(), '0 or true'), True)  # 0 coerces to false
        self.assertEqual(evaluate(DummyNode(), '0 or false'), False)  # 0 coerces to false
        self.assertEqual(evaluate(DummyNode(), 'true or 0'), True)  # 0 coerces to false
        self.assertEqual(evaluate(DummyNode(), 'false or 0'), False)  # 0 coerces to false

        self.assertEqual(evaluate(DummyNode(), 'nan or true'), True)  # nan coerces to false
        self.assertEqual(evaluate(DummyNode(), 'nan or false'), False)  # nan coerces to false
        self.assertEqual(evaluate(DummyNode(), 'true or nan'), True)  # nan coerces to false
        self.assertEqual(evaluate(DummyNode(), 'false or nan'), False)  # nan coerces to false

        self.assertEqual(evaluate(DummyNode(), '1 or true'), True)  # non-0 coerces to true
        self.assertEqual(evaluate(DummyNode(), '1 or false'), True)  # non-0 coerces to true
        self.assertEqual(evaluate(DummyNode(), 'true or 1'), True)  # non-0 coerces to true
        self.assertEqual(evaluate(DummyNode(), 'false or 1'), True)  # non-0 coerces to true

        self.assertEqual(evaluate(DummyNode(), '-1 or true'), True)  # non-0 coerces to true (even if its negative)
        self.assertEqual(evaluate(DummyNode(), '-1 or false'), True)  # non-0 coerces to true (even if its negative)
        self.assertEqual(evaluate(DummyNode(), 'true or -1'), True)  # non-0 coerces to true (even if its negative)
        self.assertEqual(evaluate(DummyNode(), 'false or -1'), True)  # non-0 coerces to true (even if its negative)

    def test_must_apply_or_single_vs_seq_using_zip_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), 'true expand zip sequence or (true, true)'), [True])
        self.assertEqual(evaluate(DummyNode(), 'true expand zip sequence or (true, false)'), [True])
        self.assertEqual(evaluate(DummyNode(), 'true expand zip sequence or (1, nan, "s", "")'), [True])
        self.assertEqual(evaluate(DummyNode(), 'true expand zip sequence or (1, "s", true)'), [True])
        self.assertEqual(evaluate(DummyNode(), 'true expand zip sequence or (0, nan, "")'), [True])
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip sequence or (true, true)'), [True])
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip sequence or (true, false)'), [True])
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip sequence or (1, nan, "s", "")'), [True])
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip sequence or (1, "s", true)'), [True])
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip sequence or (0, nan, "")'), [True])
        self.assertEqual(evaluate(DummyNode(), '1 expand zip sequence or (true, true)'), [True])
        self.assertEqual(evaluate(DummyNode(), '1 expand zip sequence or (true, false)'), [True])
        self.assertEqual(evaluate(DummyNode(), '1 expand zip sequence or (1, nan, "s", "")'), [True])
        self.assertEqual(evaluate(DummyNode(), '1 expand zip sequence or (1, "s", true)'), [True])
        self.assertEqual(evaluate(DummyNode(), '1 expand zip sequence or (0, nan, "")'), [True])
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip sequence or (true, true)'), [True])
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip sequence or (true, false)'), [True])
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip sequence or (1, nan, "s", "")'), [True])
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip sequence or (1, "s", true)'), [True])
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip sequence or (0, nan, "")'), [True])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), 'false expand zip sequence or (true, true)'), [True])
        self.assertEqual(evaluate(DummyNode(), 'false expand zip sequence or (true, false)'), [True])
        self.assertEqual(evaluate(DummyNode(), 'false expand zip sequence or (1, nan, "s", "")'), [True])
        self.assertEqual(evaluate(DummyNode(), 'false expand zip sequence or (1, "s", False)'), [True])
        self.assertEqual(evaluate(DummyNode(), 'false expand zip sequence or (0, nan, "")'), [False])
        self.assertEqual(evaluate(DummyNode(), '"" expand zip sequence or (true, true)'), [True])
        self.assertEqual(evaluate(DummyNode(), '"" expand zip sequence or (true, false)'), [True])
        self.assertEqual(evaluate(DummyNode(), '"" expand zip sequence or (1, nan, "s", "")'), [True])
        self.assertEqual(evaluate(DummyNode(), '"" expand zip sequence or (1, "s", False)'), [True])
        self.assertEqual(evaluate(DummyNode(), '"" expand zip sequence or (0, nan, "")'), [False])
        self.assertEqual(evaluate(DummyNode(), '0 expand zip sequence or (true, true)'), [True])
        self.assertEqual(evaluate(DummyNode(), '0 expand zip sequence or (true, false)'), [True])
        self.assertEqual(evaluate(DummyNode(), '0 expand zip sequence or (1, nan, "s", "")'), [True])
        self.assertEqual(evaluate(DummyNode(), '0 expand zip sequence or (1, "s", true)'), [True])
        self.assertEqual(evaluate(DummyNode(), '0 expand zip sequence or (0, nan, "")'), [False])
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip sequence or (true, true)'), [True])
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip sequence or (true, false)'), [True])
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip sequence or (1, nan, "s", "")'), [True])
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip sequence or (1, "s", true)'), [True])
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip sequence or (0, nan, "")'), [False])
        # empty
        self.assertEqual(evaluate(DummyNode(), 'true expand zip sequence or ()'), [])

    def test_must_apply_or_single_vs_seq_using_zip_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), 'true expand zip any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), 'true expand zip any or (true, false)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), 'true expand zip any or (1, nan, "s", "")'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), 'true expand zip any or (1, "s", true)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), 'true expand zip any or (0, nan, "")'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip any or (true, false)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip any or (1, nan, "s", "")'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip any or (1, "s", true)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip any or (0, nan, "")'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand zip any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand zip any or (true, false)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand zip any or (1, nan, "s", "")'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand zip any or (1, "s", true)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand zip any or (0, nan, "")'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip any or (true, false)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip any or (1, nan, "s", "")'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip any or (1, "s", true)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip any or (0, nan, "")'), any([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), 'false expand zip any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), 'false expand zip any or (true, false)'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), 'false expand zip any or (1, nan, "s", "")'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), 'false expand zip any or (1, "s", False)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), 'false expand zip any or (0, nan, "")'), any([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '"" expand zip any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '"" expand zip any or (true, false)'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '"" expand zip any or (1, nan, "s", "")'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '"" expand zip any or (1, "s", False)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '"" expand zip any or (0, nan, "")'), any([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '0 expand zip any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '0 expand zip any or (true, false)'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '0 expand zip any or (1, nan, "s", "")'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '0 expand zip any or (1, "s", true)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '0 expand zip any or (0, nan, "")'), any([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip any or (true, false)'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip any or (1, nan, "s", "")'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip any or (1, "s", true)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip any or (0, nan, "")'), any([False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyNode(), 'true expand zip any or ()'), any([]))
    
    def test_must_apply_or_single_vs_seq_using_zip_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), 'true expand zip all or (true, true)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), 'true expand zip all or (true, false)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), 'true expand zip all or (1, nan, "s", "")'), all([True]))
        self.assertEqual(evaluate(DummyNode(), 'true expand zip all or (1, "s", true)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), 'true expand zip all or (0, nan, "")'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip all or (true, true)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip all or (true, false)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip all or (1, nan, "s", "")'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip all or (1, "s", true)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand zip all or (0, nan, "")'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand zip all or (true, true)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand zip all or (true, false)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand zip all or (1, nan, "s", "")'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand zip all or (1, "s", true)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand zip all or (0, nan, "")'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip all or (true, true)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip all or (true, false)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip all or (1, nan, "s", "")'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip all or (1, "s", true)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand zip all or (0, nan, "")'), all([True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), 'false expand zip all or (true, true)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), 'false expand zip all or (true, false)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), 'false expand zip all or (1, nan, "s", "")'), all([True]))
        self.assertEqual(evaluate(DummyNode(), 'false expand zip all or (1, "s", False)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), 'false expand zip all or (0, nan, "")'), all([False]))
        self.assertEqual(evaluate(DummyNode(), '"" expand zip all or (true, true)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '"" expand zip all or (true, false)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '"" expand zip all or (1, nan, "s", "")'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '"" expand zip all or (1, "s", False)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '"" expand zip all or (0, nan, "")'), all([False]))
        self.assertEqual(evaluate(DummyNode(), '0 expand zip all or (true, true)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '0 expand zip all or (true, false)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '0 expand zip all or (1, nan, "s", "")'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '0 expand zip all or (1, "s", true)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '0 expand zip all or (0, nan, "")'), all([False]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip all or (true, true)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip all or (true, false)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip all or (1, nan, "s", "")'), all([True]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip all or (1, "s", true)'), all([True]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand zip all or (0, nan, "")'), all([False]))
        # empty
        self.assertEqual(evaluate(DummyNode(), 'true expand zip all or ()'), all([]))

    def test_must_apply_or_single_vs_seq_using_product_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), 'true expand product sequence or (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), 'true expand product sequence or (true, false)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), 'true expand product sequence or (1, nan, "s", "")'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), 'true expand product sequence or (1, "s", true)'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), 'true expand product sequence or (0, nan, "")'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '"a" expand product sequence or (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '"a" expand product sequence or (true, false)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '"a" expand product sequence or (1, nan, "s", "")'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '"a" expand product sequence or (1, "s", true)'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '"a" expand product sequence or (0, nan, "")'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '1 expand product sequence or (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '1 expand product sequence or (true, false)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '1 expand product sequence or (1, nan, "s", "")'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '1 expand product sequence or (1, "s", true)'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '1 expand product sequence or (0, nan, "")'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product sequence or (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product sequence or (true, false)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product sequence or (1, nan, "s", "")'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product sequence or (1, "s", true)'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product sequence or (0, nan, "")'), [True, True, True])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), 'false expand product sequence or (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), 'false expand product sequence or (true, false)'), [True, False])
        self.assertEqual(evaluate(DummyNode(), 'false expand product sequence or (1, nan, "s", "")'), [True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), 'false expand product sequence or (1, "s", False)'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), 'false expand product sequence or (0, nan, "")'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '"" expand product sequence or (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '"" expand product sequence or (true, false)'), [True, False])
        self.assertEqual(evaluate(DummyNode(), '"" expand product sequence or (1, nan, "s", "")'), [True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '"" expand product sequence or (1, "s", False)'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '"" expand product sequence or (0, nan, "")'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '0 expand product sequence or (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '0 expand product sequence or (true, false)'), [True, False])
        self.assertEqual(evaluate(DummyNode(), '0 expand product sequence or (1, nan, "s", "")'), [True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '0 expand product sequence or (1, "s", true)'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '0 expand product sequence or (0, nan, "")'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), 'nan expand product sequence or (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), 'nan expand product sequence or (true, false)'), [True, False])
        self.assertEqual(evaluate(DummyNode(), 'nan expand product sequence or (1, nan, "s", "")'), [True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), 'nan expand product sequence or (1, "s", true)'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), 'nan expand product sequence or (0, nan, "")'), [False, False, False])
        # empty
        self.assertEqual(evaluate(DummyNode(), 'true expand product sequence or ()'), [])

    def test_must_apply_or_single_vs_seq_using_product_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), 'true expand product any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), 'true expand product any or (true, false)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), 'true expand product any or (1, nan, "s", "")'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), 'true expand product any or (1, "s", true)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), 'true expand product any or (0, nan, "")'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand product any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand product any or (true, false)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand product any or (1, nan, "s", "")'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand product any or (1, "s", true)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand product any or (0, nan, "")'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand product any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand product any or (true, false)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand product any or (1, nan, "s", "")'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand product any or (1, "s", true)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand product any or (0, nan, "")'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product any or (true, false)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product any or (1, nan, "s", "")'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product any or (1, "s", true)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product any or (0, nan, "")'), any([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), 'false expand product any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), 'false expand product any or (true, false)'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), 'false expand product any or (1, nan, "s", "")'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), 'false expand product any or (1, "s", False)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), 'false expand product any or (0, nan, "")'), any([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '"" expand product any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '"" expand product any or (true, false)'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '"" expand product any or (1, nan, "s", "")'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '"" expand product any or (1, "s", False)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '"" expand product any or (0, nan, "")'), any([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '0 expand product any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '0 expand product any or (true, false)'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '0 expand product any or (1, nan, "s", "")'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '0 expand product any or (1, "s", true)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '0 expand product any or (0, nan, "")'), any([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand product any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand product any or (true, false)'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand product any or (1, nan, "s", "")'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand product any or (1, "s", true)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand product any or (0, nan, "")'), any([False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyNode(), 'true expand product any or ()'), any([]))

    def test_must_apply_or_single_vs_seq_using_product_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), 'true expand product all or (true, true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), 'true expand product all or (true, false)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), 'true expand product all or (1, nan, "s", "")'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), 'true expand product all or (1, "s", true)'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), 'true expand product all or (0, nan, "")'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand product all or (true, true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand product all or (true, false)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand product all or (1, nan, "s", "")'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand product all or (1, "s", true)'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand product all or (0, nan, "")'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand product all or (true, true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand product all or (true, false)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand product all or (1, nan, "s", "")'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand product all or (1, "s", true)'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand product all or (0, nan, "")'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product all or (true, true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product all or (true, false)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product all or (1, nan, "s", "")'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product all or (1, "s", true)'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand product all or (0, nan, "")'), all([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), 'false expand product all or (true, true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), 'false expand product all or (true, false)'), all([True, False]))
        self.assertEqual(evaluate(DummyNode(), 'false expand product all or (1, nan, "s", "")'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), 'false expand product all or (1, "s", False)'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), 'false expand product all or (0, nan, "")'), all([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '"" expand product all or (true, true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '"" expand product all or (true, false)'), all([True, False]))
        self.assertEqual(evaluate(DummyNode(), '"" expand product all or (1, nan, "s", "")'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '"" expand product all or (1, "s", False)'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '"" expand product all or (0, nan, "")'), all([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '0 expand product all or (true, true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '0 expand product all or (true, false)'), all([True, False]))
        self.assertEqual(evaluate(DummyNode(), '0 expand product all or (1, nan, "s", "")'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '0 expand product all or (1, "s", true)'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '0 expand product all or (0, nan, "")'), all([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand product all or (true, true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand product all or (true, false)'), all([True, False]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand product all or (1, nan, "s", "")'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand product all or (1, "s", true)'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand product all or (0, nan, "")'), all([False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyNode(), 'true expand product all or ()'), all([]))
        
    def test_must_apply_or_single_vs_seq(self):  # equiv to expand product any
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), 'true expand or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), 'true expand or (true, false)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), 'true expand or (1, nan, "s", "")'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), 'true expand or (1, "s", true)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), 'true expand or (0, nan, "")'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand or (true, false)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand or (1, nan, "s", "")'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand or (1, "s", true)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '"a" expand or (0, nan, "")'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand or (true, false)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand or (1, nan, "s", "")'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand or (1, "s", true)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1 expand or (0, nan, "")'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand or (true, false)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand or (1, nan, "s", "")'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand or (1, "s", true)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '1.5 expand or (0, nan, "")'), any([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), 'false expand or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), 'false expand or (true, false)'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), 'false expand or (1, nan, "s", "")'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), 'false expand or (1, "s", False)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), 'false expand or (0, nan, "")'), any([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '"" expand or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '"" expand or (true, false)'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '"" expand or (1, nan, "s", "")'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '"" expand or (1, "s", False)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '"" expand or (0, nan, "")'), any([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '0 expand or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '0 expand or (true, false)'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '0 expand or (1, nan, "s", "")'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '0 expand or (1, "s", true)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '0 expand or (0, nan, "")'), any([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand or (true, false)'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand or (1, nan, "s", "")'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand or (1, "s", true)'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), 'nan expand or (0, nan, "")'), any([False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyNode(), 'true expand or ()'), any([]))

    def test_must_apply_or_seq_vs_single_using_zip_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence or true'), [True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip sequence or true'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip sequence or true'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip sequence or true'), [True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip sequence or true'), [True])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence or "a"'), [True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip sequence or "a"'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip sequence or "a"'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip sequence or "a"'), [True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip sequence or "a"'), [True])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence or 1'), [True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip sequence or 1'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip sequence or 1'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip sequence or 1'), [True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip sequence or 1'), [True])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence or 1.5'), [True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip sequence or 1.5'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip sequence or 1.5'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip sequence or 1.5'), [True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip sequence or 1.5'), [True])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence or false'), [True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip sequence or false'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip sequence or false'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand zip sequence or false'), [True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip sequence or false'), [False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence or ""'), [True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip sequence or ""'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip sequence or ""'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand zip sequence or ""'), [True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip sequence or ""'), [False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence or 0'), [True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip sequence or 0'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip sequence or 0'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip sequence or 0'), [True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip sequence or 0'), [False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence or nan'), [True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip sequence or nan'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip sequence or nan'), [True])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip sequence or nan'), [True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip sequence or nan'), [False])
        # empty
        self.assertEqual(evaluate(DummyNode(), '() expand zip sequence or true'), [])

    def test_must_apply_or_seq_vs_single_using_zip_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any or true'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip any or true'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip any or true'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip any or true'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip any or true'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any or "a"'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip any or "a"'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip any or "a"'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip any or "a"'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip any or "a"'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any or 1'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip any or 1'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip any or 1'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip any or 1'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip any or 1'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any or 1.5'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip any or 1.5'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip any or 1.5'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip any or 1.5'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip any or 1.5'), any([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any or false'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip any or false'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip any or false'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand zip any or false'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip any or false'), any([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any or ""'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip any or ""'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip any or ""'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand zip any or ""'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip any or ""'), any([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any or 0'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip any or 0'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip any or 0'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip any or 0'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip any or 0'), any([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any or nan'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip any or nan'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip any or nan'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip any or nan'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip any or nan'), any([False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyNode(), '() expand zip any or true'), any([]))

    def test_must_apply_or_seq_vs_single_using_zip_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all or true'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip all or true'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip all or true'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip all or true'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip all or true'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all or "a"'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip all or "a"'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip all or "a"'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip all or "a"'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip all or "a"'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all or 1'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip all or 1'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip all or 1'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip all or 1'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip all or 1'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all or 1.5'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip all or 1.5'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip all or 1.5'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip all or 1.5'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip all or 1.5'), all([True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all or false'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip all or false'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip all or false'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand zip all or false'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip all or false'), all([False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all or ""'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip all or ""'), all([True, ]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip all or ""'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand zip all or ""'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip all or ""'), all([False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all or 0'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip all or 0'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip all or 0'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip all or 0'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip all or 0'), all([False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all or nan'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand zip all or nan'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand zip all or nan'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand zip all or nan'), all([True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand zip all or nan'), all([False]))
        # empty
        self.assertEqual(evaluate(DummyNode(), '() expand zip all or true'), all([]))

    def test_must_apply_or_seq_vs_single_using_product_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence or true'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product sequence or true'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product sequence or true'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product sequence or true'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product sequence or true'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence or "a"'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product sequence or "a"'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product sequence or "a"'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product sequence or "a"'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product sequence or "a"'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence or 1'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product sequence or 1'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product sequence or 1'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product sequence or 1'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product sequence or 1'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence or 1.5'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product sequence or 1.5'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product sequence or 1.5'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product sequence or 1.5'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product sequence or 1.5'), [True, True, True])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence or false'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product sequence or false'), [True, False])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product sequence or false'), [True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand product sequence or false'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product sequence or false'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence or ""'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product sequence or ""'), [True, False])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product sequence or ""'), [True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand product sequence or ""'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product sequence or ""'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence or 0'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product sequence or 0'), [True, False])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product sequence or 0'), [True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product sequence or 0'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product sequence or 0'), [False, False, False])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence or nan'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product sequence or nan'), [True, False])
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product sequence or nan'), [True, False, True, False])
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product sequence or nan'), [True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product sequence or nan'), [False, False, False])
        # empty
        self.assertEqual(evaluate(DummyNode(), '() expand product sequence or true'), [])
    def test_must_apply_or_seq_vs_single_using_product_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any or true'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product any or true'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product any or true'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product any or true'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product any or true'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any or "a"'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product any or "a"'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product any or "a"'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product any or "a"'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product any or "a"'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any or 1'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product any or 1'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product any or 1'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product any or 1'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product any or 1'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any or 1.5'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product any or 1.5'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product any or 1.5'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product any or 1.5'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product any or 1.5'), any([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any or false'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product any or false'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product any or false'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand product any or false'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product any or false'), any([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any or ""'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product any or ""'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product any or ""'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand product any or ""'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product any or ""'), any([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any or 0'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product any or 0'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product any or 0'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product any or 0'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product any or 0'), any([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any or nan'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product any or nan'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product any or nan'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product any or nan'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product any or nan'), any([False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyNode(), '() expand product any or true'), any([]))

    def test_must_apply_or_seq_vs_single_using_product_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all or true'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product all or true'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product all or true'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product all or true'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product all or true'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all or "a"'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product all or "a"'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product all or "a"'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product all or "a"'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product all or "a"'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all or 1'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product all or 1'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product all or 1'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product all or 1'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product all or 1'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all or 1.5'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product all or 1.5'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product all or 1.5'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product all or 1.5'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product all or 1.5'), all([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all or false'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product all or false'), all([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product all or false'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand product all or false'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product all or false'), all([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all or ""'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product all or ""'), all([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product all or ""'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand product all or ""'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product all or ""'), all([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all or 0'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product all or 0'), all([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product all or 0'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product all or 0'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product all or 0'), all([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all or nan'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand product all or nan'), all([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand product all or nan'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand product all or nan'), all([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand product all or nan'), all([False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyNode(), '() expand product all or true'), all([]))

    def test_must_apply_or_seq_vs_single(self):  # equiv to expand product any
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand or true'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand or true'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand or true'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand or true'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand or true'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand or "a"'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand or "a"'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand or "a"'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand or "a"'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand or "a"'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand or 1'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand or 1'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand or 1'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand or 1'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand or 1'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand or 1.5'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand or 1.5'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand or 1.5'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand or 1.5'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand or 1.5'), any([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand or false'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand or false'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand or false'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand or false'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand or false'), any([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand or ""'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand or ""'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand or ""'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", False) expand or ""'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand or ""'), any([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand or 0'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand or 0'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand or 0'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand or 0'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand or 0'), any([False, False, False]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand or nan'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, false) expand or nan'), any([True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, nan, "s", "") expand or nan'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyNode(), '(1, "s", true) expand or nan'), any([True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, nan, "") expand or nan'), any([False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyNode(), '() expand or true'), any([]))
        
    def test_must_apply_or_seq_vs_seq_using_zip_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence or (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence or (true, false)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence or (1, nan, "s", "")'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence or (1, "s", true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence or (0, nan, "")'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip sequence or (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip sequence or (true, false)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip sequence or (1, nan, "s", "")'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip sequence or (1, "s", true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip sequence or (0, nan, "")'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip sequence or (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip sequence or (true, false)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip sequence or (1, nan, "s", "")'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip sequence or (1, "s", true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip sequence or (0, nan, "")'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip sequence or (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip sequence or (true, false)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip sequence or (1, nan, "s", "")'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip sequence or (1, "s", true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip sequence or (0, nan, "")'), [True, True])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip sequence or (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip sequence or (true, false)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip sequence or (1, nan, "s", "")'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip sequence or (1, "s", False)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip sequence or (0, nan, "")'), [False, True])
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip sequence or (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip sequence or (true, false)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip sequence or (1, nan, "s", "")'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip sequence or (1, "s", False)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip sequence or (0, nan, "")'), [False, True])
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip sequence or (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip sequence or (true, false)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip sequence or (1, nan, "s", "")'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip sequence or (1, "s", true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip sequence or (0, nan, "")'), [False, True])
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip sequence or (true, true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip sequence or (true, false)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip sequence or (1, nan, "s", "")'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip sequence or (1, "s", true)'), [True, True])
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip sequence or (0, nan, "")'), [False, True])
        # empty
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip sequence or ()'), [])

    def test_must_apply_or_seq_vs_seq_using_zip_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any or (true, false)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any or (1, nan, "s", "")'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any or (1, "s", true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any or (0, nan, "")'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip any or (true, false)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip any or (1, nan, "s", "")'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip any or (1, "s", true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip any or (0, nan, "")'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip any or (true, false)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip any or (1, nan, "s", "")'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip any or (1, "s", true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip any or (0, nan, "")'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip any or (true, false)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip any or (1, nan, "s", "")'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip any or (1, "s", true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip any or (0, nan, "")'), any([True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip any or (true, false)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip any or (1, nan, "s", "")'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip any or (1, "s", False)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip any or (0, nan, "")'), any([False, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip any or (true, false)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip any or (1, nan, "s", "")'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip any or (1, "s", False)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip any or (0, nan, "")'), any([False, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip any or (true, false)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip any or (1, nan, "s", "")'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip any or (1, "s", true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip any or (0, nan, "")'), any([False, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip any or (true, true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip any or (true, false)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip any or (1, nan, "s", "")'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip any or (1, "s", true)'), any([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip any or (0, nan, "")'), any([False, True]))
        # empty
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip any or ()'), any([]))

    def test_must_apply_or_seq_vs_seq_using_zip_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all or (true, true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all or (true, false)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all or (1, nan, "s", "")'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all or (1, "s", true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all or (0, nan, "")'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip all or (true, true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip all or (true, false)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip all or (1, nan, "s", "")'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip all or (1, "s", true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand zip all or (0, nan, "")'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip all or (true, true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip all or (true, false)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip all or (1, nan, "s", "")'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip all or (1, "s", true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand zip all or (0, nan, "")'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip all or (true, true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip all or (true, false)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip all or (1, nan, "s", "")'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip all or (1, "s", true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand zip all or (0, nan, "")'), all([True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip all or (true, true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip all or (true, false)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip all or (1, nan, "s", "")'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip all or (1, "s", False)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand zip all or (0, nan, "")'), all([False, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip all or (true, true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip all or (true, false)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip all or (1, nan, "s", "")'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip all or (1, "s", False)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand zip all or (0, nan, "")'), all([False, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip all or (true, true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip all or (true, false)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip all or (1, nan, "s", "")'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip all or (1, "s", true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand zip all or (0, nan, "")'), all([False, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip all or (true, true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip all or (true, false)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip all or (1, nan, "s", "")'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip all or (1, "s", true)'), all([True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand zip all or (0, nan, "")'), all([False, True]))
        # empty
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand zip all or ()'), all([]))

    def test_must_apply_or_seq_vs_seq_product_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence or (true, true)'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence or (true, false)'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence or (1, nan, "s", "")'), [True, True, True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence or (1, "s", true)'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence or (0, nan, "")'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product sequence or (true, true)'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product sequence or (true, false)'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product sequence or (1, nan, "s", "")'), [True, True, True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product sequence or (1, "s", true)'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product sequence or (0, nan, "")'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product sequence or (true, true)'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product sequence or (true, false)'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product sequence or (1, nan, "s", "")'), [True, True, True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product sequence or (1, "s", true)'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product sequence or (0, nan, "")'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product sequence or (true, true)'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product sequence or (true, false)'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product sequence or (1, nan, "s", "")'), [True, True, True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product sequence or (1, "s", true)'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product sequence or (0, nan, "")'), [True, True, True, True, True, True])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product sequence or (true, true)'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product sequence or (true, false)'), [True, False, True, True])
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product sequence or (1, nan, "s", "")'), [True, False, True, False, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product sequence or (1, "s", False)'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product sequence or (0, nan, "")'), [False, False, False, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product sequence or (true, true)'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product sequence or (true, false)'), [True, False, True, True])
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product sequence or (1, nan, "s", "")'), [True, False, True, False, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product sequence or (1, "s", False)'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product sequence or (0, nan, "")'), [False, False, False, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product sequence or (true, true)'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product sequence or (true, false)'), [True, False, True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product sequence or (1, nan, "s", "")'), [True, False, True, False, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product sequence or (1, "s", true)'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product sequence or (0, nan, "")'), [False, False, False, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product sequence or (true, true)'), [True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product sequence or (true, false)'), [True, False, True, True])
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product sequence or (1, nan, "s", "")'), [True, False, True, False, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product sequence or (1, "s", true)'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product sequence or (0, nan, "")'), [False, False, False, True, True, True])
        # empty
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product sequence or ()'), [])

    def test_must_apply_or_seq_vs_seq_product_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any or (true, true)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any or (true, false)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any or (1, nan, "s", "")'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any or (1, "s", true)'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any or (0, nan, "")'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product any or (true, true)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product any or (true, false)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product any or (1, nan, "s", "")'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product any or (1, "s", true)'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product any or (0, nan, "")'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product any or (true, true)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product any or (true, false)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product any or (1, nan, "s", "")'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product any or (1, "s", true)'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product any or (0, nan, "")'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product any or (true, true)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product any or (true, false)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product any or (1, nan, "s", "")'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product any or (1, "s", true)'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product any or (0, nan, "")'), any([True, True, True, True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product any or (true, true)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product any or (true, false)'), any([True, False, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product any or (1, nan, "s", "")'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product any or (1, "s", False)'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product any or (0, nan, "")'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product any or (true, true)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product any or (true, false)'), any([True, False, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product any or (1, nan, "s", "")'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product any or (1, "s", False)'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product any or (0, nan, "")'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product any or (true, true)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product any or (true, false)'), any([True, False, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product any or (1, nan, "s", "")'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product any or (1, "s", true)'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product any or (0, nan, "")'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product any or (true, true)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product any or (true, false)'), any([True, False, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product any or (1, nan, "s", "")'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product any or (1, "s", true)'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product any or (0, nan, "")'), any([False, False, False, True, True, True]))
        # empty
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product any or ()'), any([]))

    def test_must_apply_or_seq_vs_seq_product_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all or (true, true)'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all or (true, false)'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all or (1, nan, "s", "")'), all([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all or (1, "s", true)'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all or (0, nan, "")'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product all or (true, true)'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product all or (true, false)'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product all or (1, nan, "s", "")'), all([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product all or (1, "s", true)'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand product all or (0, nan, "")'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product all or (true, true)'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product all or (true, false)'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product all or (1, nan, "s", "")'), all([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product all or (1, "s", true)'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand product all or (0, nan, "")'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product all or (true, true)'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product all or (true, false)'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product all or (1, nan, "s", "")'), all([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product all or (1, "s", true)'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand product all or (0, nan, "")'), all([True, True, True, True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product all or (true, true)'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product all or (true, false)'), all([True, False, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product all or (1, nan, "s", "")'), all([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product all or (1, "s", False)'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand product all or (0, nan, "")'), all([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product all or (true, true)'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product all or (true, false)'), all([True, False, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product all or (1, nan, "s", "")'), all([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product all or (1, "s", False)'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand product all or (0, nan, "")'), all([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product all or (true, true)'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product all or (true, false)'), all([True, False, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product all or (1, nan, "s", "")'), all([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product all or (1, "s", true)'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand product all or (0, nan, "")'), all([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product all or (true, true)'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product all or (true, false)'), all([True, False, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product all or (1, nan, "s", "")'), all([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product all or (1, "s", true)'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand product all or (0, nan, "")'), all([False, False, False, True, True, True]))
        # empty
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand product all or ()'), all([]))

    def test_must_apply_or_seq_vs_seq(self):  # equiv to expand product any
        # lhs coerces to true
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand or (true, true)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand or (true, false)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand or (1, nan, "s", "")'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand or (1, "s", true)'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand or (0, nan, "")'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand or (true, true)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand or (true, false)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand or (1, nan, "s", "")'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand or (1, "s", true)'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("a", true) expand or (0, nan, "")'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand or (true, true)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand or (true, false)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand or (1, nan, "s", "")'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand or (1, "s", true)'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1, true) expand or (0, nan, "")'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand or (true, true)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand or (true, false)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand or (1, nan, "s", "")'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand or (1, "s", true)'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(1.5, true) expand or (0, nan, "")'), any([True, True, True, True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand or (true, true)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand or (true, false)'), any([True, False, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand or (1, nan, "s", "")'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand or (1, "s", False)'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(false, true) expand or (0, nan, "")'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand or (true, true)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand or (true, false)'), any([True, False, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand or (1, nan, "s", "")'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand or (1, "s", False)'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '("", true) expand or (0, nan, "")'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand or (true, true)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand or (true, false)'), any([True, False, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand or (1, nan, "s", "")'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand or (1, "s", true)'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(0, true) expand or (0, nan, "")'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand or (true, true)'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand or (true, false)'), any([True, False, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand or (1, nan, "s", "")'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand or (1, "s", true)'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyNode(), '(nan, true) expand or (0, nan, "")'), any([False, False, False, True, True, True]))
        # empty
        self.assertEqual(evaluate(DummyNode(), '(true, true) expand or ()'), any([]))


if __name__ == '__main__':
    unittest.main()
