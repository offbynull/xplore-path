import unittest

from xplore_path.evaluator import evaluate
from xplore_path.paths.dummy.dummy_path import DummyPath


class EvaluatorTest(unittest.TestCase):
    def test_must_apply_or_single_vs_single(self):
        self.assertEqual(evaluate(DummyPath(), 'true or true'), True)
        self.assertEqual(evaluate(DummyPath(), 'true or false'), True)
        self.assertEqual(evaluate(DummyPath(), 'false or true'), True)
        self.assertEqual(evaluate(DummyPath(), 'false or false'), False)

        self.assertEqual(evaluate(DummyPath(), 'a or true'), True)  # non-empty string coerces to true
        self.assertEqual(evaluate(DummyPath(), 'a or false'), True)  # non-empty string coerces to true
        self.assertEqual(evaluate(DummyPath(), 'true or a'), True)  # non-empty string coerces to true
        self.assertEqual(evaluate(DummyPath(), 'false or a'), True)  # non-empty string coerces to true

        self.assertEqual(evaluate(DummyPath(), '"" or true'), True)  # empty string coerces to false
        self.assertEqual(evaluate(DummyPath(), '"" or false'), False)  # empty string coerces to false
        self.assertEqual(evaluate(DummyPath(), 'true or ""'), True)  # empty string coerces to false
        self.assertEqual(evaluate(DummyPath(), 'false or ""'), False)  # empty string coerces to false

        self.assertEqual(evaluate(DummyPath(), '0 or true'), True)  # 0 coerces to false
        self.assertEqual(evaluate(DummyPath(), '0 or false'), False)  # 0 coerces to false
        self.assertEqual(evaluate(DummyPath(), 'true or 0'), True)  # 0 coerces to false
        self.assertEqual(evaluate(DummyPath(), 'false or 0'), False)  # 0 coerces to false

        self.assertEqual(evaluate(DummyPath(), 'nan or true'), True)  # nan coerces to false
        self.assertEqual(evaluate(DummyPath(), 'nan or false'), False)  # nan coerces to false
        self.assertEqual(evaluate(DummyPath(), 'true or nan'), True)  # nan coerces to false
        self.assertEqual(evaluate(DummyPath(), 'false or nan'), False)  # nan coerces to false

        self.assertEqual(evaluate(DummyPath(), '1 or true'), True)  # non-0 coerces to true
        self.assertEqual(evaluate(DummyPath(), '1 or false'), True)  # non-0 coerces to true
        self.assertEqual(evaluate(DummyPath(), 'true or 1'), True)  # non-0 coerces to true
        self.assertEqual(evaluate(DummyPath(), 'false or 1'), True)  # non-0 coerces to true

        self.assertEqual(evaluate(DummyPath(), '-1 or true'), True)  # non-0 coerces to true (even if its negative)
        self.assertEqual(evaluate(DummyPath(), '-1 or false'), True)  # non-0 coerces to true (even if its negative)
        self.assertEqual(evaluate(DummyPath(), 'true or -1'), True)  # non-0 coerces to true (even if its negative)
        self.assertEqual(evaluate(DummyPath(), 'false or -1'), True)  # non-0 coerces to true (even if its negative)

    def test_must_apply_or_single_vs_seq_using_zip_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), 'true zip sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), 'true zip sequence or {true, false}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), 'true zip sequence or {1, nan, "s", ""}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), 'true zip sequence or {1, "s", true}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), 'true zip sequence or {0, nan, ""}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '"a" zip sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '"a" zip sequence or {true, false}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '"a" zip sequence or {1, nan, "s", ""}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '"a" zip sequence or {1, "s", true}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '"a" zip sequence or {0, nan, ""}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '1 zip sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '1 zip sequence or {true, false}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '1 zip sequence or {1, nan, "s", ""}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '1 zip sequence or {1, "s", true}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '1 zip sequence or {0, nan, ""}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '1.5 zip sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '1.5 zip sequence or {true, false}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '1.5 zip sequence or {1, nan, "s", ""}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '1.5 zip sequence or {1, "s", true}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '1.5 zip sequence or {0, nan, ""}'), [True, True, True])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), 'false zip sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), 'false zip sequence or {true, false}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), 'false zip sequence or {1, nan, "s", ""}'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), 'false zip sequence or {1, "s", False}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), 'false zip sequence or {0, nan, ""}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '"" zip sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '"" zip sequence or {true, false}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '"" zip sequence or {1, nan, "s", ""}'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '"" zip sequence or {1, "s", False}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '"" zip sequence or {0, nan, ""}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '0 zip sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '0 zip sequence or {true, false}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '0 zip sequence or {1, nan, "s", ""}'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '0 zip sequence or {1, "s", true}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '0 zip sequence or {0, nan, ""}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), 'nan zip sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), 'nan zip sequence or {true, false}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), 'nan zip sequence or {1, nan, "s", ""}'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), 'nan zip sequence or {1, "s", true}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), 'nan zip sequence or {0, nan, ""}'), [False, False, False])
        # empty
        self.assertEqual(evaluate(DummyPath(), 'true zip sequence or {}'), [])

    def test_must_apply_or_single_vs_seq_using_zip_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), 'true zip any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), 'true zip any or {true, false}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), 'true zip any or {1, nan, "s", ""}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), 'true zip any or {1, "s", true}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), 'true zip any or {0, nan, ""}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" zip any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" zip any or {true, false}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" zip any or {1, nan, "s", ""}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" zip any or {1, "s", true}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" zip any or {0, nan, ""}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 zip any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 zip any or {true, false}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 zip any or {1, nan, "s", ""}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 zip any or {1, "s", true}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 zip any or {0, nan, ""}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 zip any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 zip any or {true, false}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 zip any or {1, nan, "s", ""}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 zip any or {1, "s", true}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 zip any or {0, nan, ""}'), any([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), 'false zip any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), 'false zip any or {true, false}'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), 'false zip any or {1, nan, "s", ""}'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), 'false zip any or {1, "s", False}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), 'false zip any or {0, nan, ""}'), any([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '"" zip any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '"" zip any or {true, false}'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '"" zip any or {1, nan, "s", ""}'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '"" zip any or {1, "s", False}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '"" zip any or {0, nan, ""}'), any([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '0 zip any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '0 zip any or {true, false}'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '0 zip any or {1, nan, "s", ""}'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '0 zip any or {1, "s", true}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '0 zip any or {0, nan, ""}'), any([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), 'nan zip any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), 'nan zip any or {true, false}'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), 'nan zip any or {1, nan, "s", ""}'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), 'nan zip any or {1, "s", true}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), 'nan zip any or {0, nan, ""}'), any([False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyPath(), 'true zip any or {}'), any([]))
    
    def test_must_apply_or_single_vs_seq_using_zip_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), 'true zip all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), 'true zip all or {true, false}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), 'true zip all or {1, nan, "s", ""}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), 'true zip all or {1, "s", true}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), 'true zip all or {0, nan, ""}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" zip all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" zip all or {true, false}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" zip all or {1, nan, "s", ""}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" zip all or {1, "s", true}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" zip all or {0, nan, ""}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 zip all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 zip all or {true, false}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 zip all or {1, nan, "s", ""}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 zip all or {1, "s", true}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 zip all or {0, nan, ""}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 zip all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 zip all or {true, false}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 zip all or {1, nan, "s", ""}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 zip all or {1, "s", true}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 zip all or {0, nan, ""}'), all([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), 'false zip all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), 'false zip all or {true, false}'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), 'false zip all or {1, nan, "s", ""}'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), 'false zip all or {1, "s", False}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), 'false zip all or {0, nan, ""}'), all([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '"" zip all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '"" zip all or {true, false}'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), '"" zip all or {1, nan, "s", ""}'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '"" zip all or {1, "s", False}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '"" zip all or {0, nan, ""}'), all([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '0 zip all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '0 zip all or {true, false}'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), '0 zip all or {1, nan, "s", ""}'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '0 zip all or {1, "s", true}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '0 zip all or {0, nan, ""}'), all([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), 'nan zip all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), 'nan zip all or {true, false}'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), 'nan zip all or {1, nan, "s", ""}'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), 'nan zip all or {1, "s", true}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), 'nan zip all or {0, nan, ""}'), all([False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyPath(), 'true zip all or {}'), all([]))

    def test_must_apply_or_single_vs_seq_using_product_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), 'true product sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), 'true product sequence or {true, false}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), 'true product sequence or {1, nan, "s", ""}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), 'true product sequence or {1, "s", true}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), 'true product sequence or {0, nan, ""}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '"a" product sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '"a" product sequence or {true, false}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '"a" product sequence or {1, nan, "s", ""}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '"a" product sequence or {1, "s", true}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '"a" product sequence or {0, nan, ""}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '1 product sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '1 product sequence or {true, false}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '1 product sequence or {1, nan, "s", ""}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '1 product sequence or {1, "s", true}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '1 product sequence or {0, nan, ""}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '1.5 product sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '1.5 product sequence or {true, false}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '1.5 product sequence or {1, nan, "s", ""}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '1.5 product sequence or {1, "s", true}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '1.5 product sequence or {0, nan, ""}'), [True, True, True])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), 'false product sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), 'false product sequence or {true, false}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), 'false product sequence or {1, nan, "s", ""}'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), 'false product sequence or {1, "s", False}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), 'false product sequence or {0, nan, ""}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '"" product sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '"" product sequence or {true, false}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '"" product sequence or {1, nan, "s", ""}'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '"" product sequence or {1, "s", False}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '"" product sequence or {0, nan, ""}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '0 product sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '0 product sequence or {true, false}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '0 product sequence or {1, nan, "s", ""}'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '0 product sequence or {1, "s", true}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '0 product sequence or {0, nan, ""}'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), 'nan product sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), 'nan product sequence or {true, false}'), [True, False])
        self.assertEqual(evaluate(DummyPath(), 'nan product sequence or {1, nan, "s", ""}'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), 'nan product sequence or {1, "s", true}'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), 'nan product sequence or {0, nan, ""}'), [False, False, False])
        # empty
        self.assertEqual(evaluate(DummyPath(), 'true product sequence or {}'), [])

    def test_must_apply_or_single_vs_seq_using_product_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), 'true product any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), 'true product any or {true, false}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), 'true product any or {1, nan, "s", ""}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), 'true product any or {1, "s", true}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), 'true product any or {0, nan, ""}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" product any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" product any or {true, false}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" product any or {1, nan, "s", ""}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" product any or {1, "s", true}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" product any or {0, nan, ""}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 product any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 product any or {true, false}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 product any or {1, nan, "s", ""}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 product any or {1, "s", true}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 product any or {0, nan, ""}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 product any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 product any or {true, false}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 product any or {1, nan, "s", ""}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 product any or {1, "s", true}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 product any or {0, nan, ""}'), any([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), 'false product any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), 'false product any or {true, false}'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), 'false product any or {1, nan, "s", ""}'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), 'false product any or {1, "s", False}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), 'false product any or {0, nan, ""}'), any([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '"" product any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '"" product any or {true, false}'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '"" product any or {1, nan, "s", ""}'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '"" product any or {1, "s", False}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '"" product any or {0, nan, ""}'), any([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '0 product any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '0 product any or {true, false}'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '0 product any or {1, nan, "s", ""}'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '0 product any or {1, "s", true}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '0 product any or {0, nan, ""}'), any([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), 'nan product any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), 'nan product any or {true, false}'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), 'nan product any or {1, nan, "s", ""}'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), 'nan product any or {1, "s", true}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), 'nan product any or {0, nan, ""}'), any([False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyPath(), 'true product any or {}'), any([]))

    def test_must_apply_or_single_vs_seq_using_product_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), 'true product all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), 'true product all or {true, false}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), 'true product all or {1, nan, "s", ""}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), 'true product all or {1, "s", true}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), 'true product all or {0, nan, ""}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" product all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" product all or {true, false}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" product all or {1, nan, "s", ""}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" product all or {1, "s", true}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" product all or {0, nan, ""}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 product all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 product all or {true, false}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 product all or {1, nan, "s", ""}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 product all or {1, "s", true}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 product all or {0, nan, ""}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 product all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 product all or {true, false}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 product all or {1, nan, "s", ""}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 product all or {1, "s", true}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 product all or {0, nan, ""}'), all([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), 'false product all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), 'false product all or {true, false}'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), 'false product all or {1, nan, "s", ""}'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), 'false product all or {1, "s", False}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), 'false product all or {0, nan, ""}'), all([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '"" product all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '"" product all or {true, false}'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), '"" product all or {1, nan, "s", ""}'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '"" product all or {1, "s", False}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '"" product all or {0, nan, ""}'), all([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '0 product all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '0 product all or {true, false}'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), '0 product all or {1, nan, "s", ""}'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '0 product all or {1, "s", true}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '0 product all or {0, nan, ""}'), all([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), 'nan product all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), 'nan product all or {true, false}'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), 'nan product all or {1, nan, "s", ""}'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), 'nan product all or {1, "s", true}'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), 'nan product all or {0, nan, ""}'), all([False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyPath(), 'true product all or {}'), all([]))
        
    def test_must_apply_or_single_vs_seq(self):  # equiv to product any
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), 'true or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), 'true or {true, false}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), 'true or {1, nan, "s", ""}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), 'true or {1, "s", true}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), 'true or {0, nan, ""}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" or {true, false}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" or {1, nan, "s", ""}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" or {1, "s", true}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '"a" or {0, nan, ""}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 or {true, false}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 or {1, nan, "s", ""}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 or {1, "s", true}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1 or {0, nan, ""}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 or {true, false}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 or {1, nan, "s", ""}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 or {1, "s", true}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '1.5 or {0, nan, ""}'), any([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), 'false or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), 'false or {true, false}'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), 'false or {1, nan, "s", ""}'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), 'false or {1, "s", False}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), 'false or {0, nan, ""}'), any([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '"" or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '"" or {true, false}'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '"" or {1, nan, "s", ""}'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '"" or {1, "s", False}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '"" or {0, nan, ""}'), any([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '0 or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '0 or {true, false}'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '0 or {1, nan, "s", ""}'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '0 or {1, "s", true}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '0 or {0, nan, ""}'), any([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), 'nan or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), 'nan or {true, false}'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), 'nan or {1, nan, "s", ""}'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), 'nan or {1, "s", true}'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), 'nan or {0, nan, ""}'), any([False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyPath(), 'true or {}'), any([]))

    def test_must_apply_or_seq_vs_single_using_zip_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence or true'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip sequence or true'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip sequence or true'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip sequence or true'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip sequence or true'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence or "a"'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip sequence or "a"'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip sequence or "a"'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip sequence or "a"'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip sequence or "a"'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence or 1'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip sequence or 1'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip sequence or 1'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip sequence or 1'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip sequence or 1'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence or 1.5'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip sequence or 1.5'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip sequence or 1.5'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip sequence or 1.5'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip sequence or 1.5'), [True, True, True])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence or false'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip sequence or false'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip sequence or false'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} zip sequence or false'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip sequence or false'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence or ""'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip sequence or ""'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip sequence or ""'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} zip sequence or ""'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip sequence or ""'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence or 0'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip sequence or 0'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip sequence or 0'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip sequence or 0'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip sequence or 0'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence or nan'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip sequence or nan'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip sequence or nan'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip sequence or nan'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip sequence or nan'), [False, False, False])
        # empty
        self.assertEqual(evaluate(DummyPath(), '{} zip sequence or true'), [])

    def test_must_apply_or_seq_vs_single_using_zip_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any or true'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip any or true'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip any or true'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip any or true'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip any or true'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any or "a"'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip any or "a"'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip any or "a"'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip any or "a"'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip any or "a"'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any or 1'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip any or 1'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip any or 1'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip any or 1'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip any or 1'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any or 1.5'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip any or 1.5'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip any or 1.5'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip any or 1.5'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip any or 1.5'), any([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any or false'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip any or false'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip any or false'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} zip any or false'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip any or false'), any([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any or ""'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip any or ""'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip any or ""'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} zip any or ""'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip any or ""'), any([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any or 0'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip any or 0'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip any or 0'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip any or 0'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip any or 0'), any([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any or nan'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip any or nan'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip any or nan'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip any or nan'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip any or nan'), any([False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyPath(), '{} zip any or true'), any([]))

    def test_must_apply_or_seq_vs_single_using_zip_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all or true'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip all or true'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip all or true'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip all or true'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip all or true'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all or "a"'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip all or "a"'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip all or "a"'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip all or "a"'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip all or "a"'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all or 1'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip all or 1'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip all or 1'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip all or 1'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip all or 1'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all or 1.5'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip all or 1.5'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip all or 1.5'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip all or 1.5'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip all or 1.5'), all([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all or false'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip all or false'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip all or false'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} zip all or false'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip all or false'), all([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all or ""'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip all or ""'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip all or ""'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} zip all or ""'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip all or ""'), all([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all or 0'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip all or 0'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip all or 0'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip all or 0'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip all or 0'), all([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all or nan'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} zip all or nan'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} zip all or nan'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} zip all or nan'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} zip all or nan'), all([False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyPath(), '{} zip all or true'), all([]))

    def test_must_apply_or_seq_vs_single_using_product_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence or true'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} product sequence or true'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product sequence or true'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product sequence or true'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product sequence or true'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence or "a"'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} product sequence or "a"'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product sequence or "a"'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product sequence or "a"'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product sequence or "a"'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence or 1'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} product sequence or 1'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product sequence or 1'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product sequence or 1'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product sequence or 1'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence or 1.5'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} product sequence or 1.5'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product sequence or 1.5'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product sequence or 1.5'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product sequence or 1.5'), [True, True, True])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence or false'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} product sequence or false'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product sequence or false'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} product sequence or false'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product sequence or false'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence or ""'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} product sequence or ""'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product sequence or ""'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} product sequence or ""'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product sequence or ""'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence or 0'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} product sequence or 0'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product sequence or 0'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product sequence or 0'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product sequence or 0'), [False, False, False])
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence or nan'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, false} product sequence or nan'), [True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product sequence or nan'), [True, False, True, False])
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product sequence or nan'), [True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product sequence or nan'), [False, False, False])
        # empty
        self.assertEqual(evaluate(DummyPath(), '{} product sequence or true'), [])
    def test_must_apply_or_seq_vs_single_using_product_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any or true'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} product any or true'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product any or true'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product any or true'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product any or true'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any or "a"'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} product any or "a"'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product any or "a"'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product any or "a"'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product any or "a"'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any or 1'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} product any or 1'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product any or 1'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product any or 1'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product any or 1'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any or 1.5'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} product any or 1.5'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product any or 1.5'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product any or 1.5'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product any or 1.5'), any([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any or false'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} product any or false'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product any or false'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} product any or false'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product any or false'), any([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any or ""'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} product any or ""'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product any or ""'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} product any or ""'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product any or ""'), any([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any or 0'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} product any or 0'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product any or 0'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product any or 0'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product any or 0'), any([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any or nan'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} product any or nan'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product any or nan'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product any or nan'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product any or nan'), any([False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyPath(), '{} product any or true'), any([]))

    def test_must_apply_or_seq_vs_single_using_product_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all or true'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} product all or true'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product all or true'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product all or true'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product all or true'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all or "a"'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} product all or "a"'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product all or "a"'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product all or "a"'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product all or "a"'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all or 1'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} product all or 1'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product all or 1'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product all or 1'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product all or 1'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all or 1.5'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} product all or 1.5'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product all or 1.5'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product all or 1.5'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product all or 1.5'), all([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all or false'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} product all or false'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product all or false'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} product all or false'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product all or false'), all([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all or ""'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} product all or ""'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product all or ""'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} product all or ""'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product all or ""'), all([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all or 0'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} product all or 0'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product all or 0'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product all or 0'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product all or 0'), all([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all or nan'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} product all or nan'), all([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} product all or nan'), all([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} product all or nan'), all([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} product all or nan'), all([False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyPath(), '{} product all or true'), all([]))

    def test_must_apply_or_seq_vs_single(self):  # equiv to product any
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} or true'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} or true'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} or true'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} or true'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} or true'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} or "a"'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} or "a"'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} or "a"'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} or "a"'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} or "a"'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} or 1'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} or 1'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} or 1'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} or 1'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} or 1'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} or 1.5'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} or 1.5'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} or 1.5'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} or 1.5'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} or 1.5'), any([True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{true, true} or false'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} or false'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} or false'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} or false'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} or false'), any([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} or ""'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} or ""'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} or ""'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", False} or ""'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} or ""'), any([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} or 0'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} or 0'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} or 0'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} or 0'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} or 0'), any([False, False, False]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} or nan'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, false} or nan'), any([True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, nan, "s", ""} or nan'), any([True, False, True, False]))
        self.assertEqual(evaluate(DummyPath(), '{1, "s", true} or nan'), any([True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, nan, ""} or nan'), any([False, False, False]))
        # empty
        self.assertEqual(evaluate(DummyPath(), '{} or true'), any([]))
        
    def test_must_apply_or_seq_vs_seq_using_zip_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence or {true, false}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence or {1, nan, "s", ""}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence or {1, "s", true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence or {0, nan, ""}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip sequence or {true, false}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip sequence or {1, nan, "s", ""}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip sequence or {1, "s", true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip sequence or {0, nan, ""}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip sequence or {true, false}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip sequence or {1, nan, "s", ""}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip sequence or {1, "s", true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip sequence or {0, nan, ""}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip sequence or {true, false}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip sequence or {1, nan, "s", ""}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip sequence or {1, "s", true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip sequence or {0, nan, ""}'), [True, True])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip sequence or {true, false}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip sequence or {1, nan, "s", ""}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip sequence or {1, "s", False}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip sequence or {0, nan, ""}'), [False, True])
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip sequence or {true, false}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip sequence or {1, nan, "s", ""}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip sequence or {1, "s", False}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip sequence or {0, nan, ""}'), [False, True])
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip sequence or {true, false}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip sequence or {1, nan, "s", ""}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip sequence or {1, "s", true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip sequence or {0, nan, ""}'), [False, True])
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip sequence or {true, true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip sequence or {true, false}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip sequence or {1, nan, "s", ""}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip sequence or {1, "s", true}'), [True, True])
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip sequence or {0, nan, ""}'), [False, True])
        # empty
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip sequence or {}'), [])

    def test_must_apply_or_seq_vs_seq_using_zip_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any or {true, false}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any or {1, nan, "s", ""}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any or {1, "s", true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any or {0, nan, ""}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip any or {true, false}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip any or {1, nan, "s", ""}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip any or {1, "s", true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip any or {0, nan, ""}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip any or {true, false}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip any or {1, nan, "s", ""}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip any or {1, "s", true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip any or {0, nan, ""}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip any or {true, false}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip any or {1, nan, "s", ""}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip any or {1, "s", true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip any or {0, nan, ""}'), any([True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip any or {true, false}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip any or {1, nan, "s", ""}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip any or {1, "s", False}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip any or {0, nan, ""}'), any([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip any or {true, false}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip any or {1, nan, "s", ""}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip any or {1, "s", False}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip any or {0, nan, ""}'), any([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip any or {true, false}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip any or {1, nan, "s", ""}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip any or {1, "s", true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip any or {0, nan, ""}'), any([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip any or {true, true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip any or {true, false}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip any or {1, nan, "s", ""}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip any or {1, "s", true}'), any([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip any or {0, nan, ""}'), any([False, True]))
        # empty
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip any or {}'), any([]))

    def test_must_apply_or_seq_vs_seq_using_zip_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all or {true, false}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all or {1, nan, "s", ""}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all or {1, "s", true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all or {0, nan, ""}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip all or {true, false}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip all or {1, nan, "s", ""}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip all or {1, "s", true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} zip all or {0, nan, ""}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip all or {true, false}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip all or {1, nan, "s", ""}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip all or {1, "s", true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} zip all or {0, nan, ""}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip all or {true, false}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip all or {1, nan, "s", ""}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip all or {1, "s", true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} zip all or {0, nan, ""}'), all([True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip all or {true, false}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip all or {1, nan, "s", ""}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip all or {1, "s", False}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} zip all or {0, nan, ""}'), all([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip all or {true, false}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip all or {1, nan, "s", ""}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip all or {1, "s", False}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} zip all or {0, nan, ""}'), all([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip all or {true, false}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip all or {1, nan, "s", ""}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip all or {1, "s", true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} zip all or {0, nan, ""}'), all([False, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip all or {true, true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip all or {true, false}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip all or {1, nan, "s", ""}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip all or {1, "s", true}'), all([True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} zip all or {0, nan, ""}'), all([False, True]))
        # empty
        self.assertEqual(evaluate(DummyPath(), '{true, true} zip all or {}'), all([]))

    def test_must_apply_or_seq_vs_seq_product_sequence(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence or {true, true}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence or {true, false}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence or {1, nan, "s", ""}'), [True, True, True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence or {1, "s", true}'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence or {0, nan, ""}'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product sequence or {true, true}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product sequence or {true, false}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product sequence or {1, nan, "s", ""}'), [True, True, True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product sequence or {1, "s", true}'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product sequence or {0, nan, ""}'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, true} product sequence or {true, true}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, true} product sequence or {true, false}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, true} product sequence or {1, nan, "s", ""}'), [True, True, True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, true} product sequence or {1, "s", true}'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1, true} product sequence or {0, nan, ""}'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product sequence or {true, true}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product sequence or {true, false}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product sequence or {1, nan, "s", ""}'), [True, True, True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product sequence or {1, "s", true}'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product sequence or {0, nan, ""}'), [True, True, True, True, True, True])
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{false, true} product sequence or {true, true}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{false, true} product sequence or {true, false}'), [True, False, True, True])
        self.assertEqual(evaluate(DummyPath(), '{false, true} product sequence or {1, nan, "s", ""}'), [True, False, True, False, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{false, true} product sequence or {1, "s", False}'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{false, true} product sequence or {0, nan, ""}'), [False, False, False, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{"", true} product sequence or {true, true}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{"", true} product sequence or {true, false}'), [True, False, True, True])
        self.assertEqual(evaluate(DummyPath(), '{"", true} product sequence or {1, nan, "s", ""}'), [True, False, True, False, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{"", true} product sequence or {1, "s", False}'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{"", true} product sequence or {0, nan, ""}'), [False, False, False, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, true} product sequence or {true, true}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, true} product sequence or {true, false}'), [True, False, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, true} product sequence or {1, nan, "s", ""}'), [True, False, True, False, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, true} product sequence or {1, "s", true}'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{0, true} product sequence or {0, nan, ""}'), [False, False, False, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product sequence or {true, true}'), [True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product sequence or {true, false}'), [True, False, True, True])
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product sequence or {1, nan, "s", ""}'), [True, False, True, False, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product sequence or {1, "s", true}'), [True, True, True, True, True, True])
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product sequence or {0, nan, ""}'), [False, False, False, True, True, True])
        # empty
        self.assertEqual(evaluate(DummyPath(), '{true, true} product sequence or {}'), [])

    def test_must_apply_or_seq_vs_seq_product_any(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any or {true, true}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any or {true, false}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any or {1, nan, "s", ""}'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any or {1, "s", true}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any or {0, nan, ""}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product any or {true, true}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product any or {true, false}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product any or {1, nan, "s", ""}'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product any or {1, "s", true}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product any or {0, nan, ""}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} product any or {true, true}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} product any or {true, false}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} product any or {1, nan, "s", ""}'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} product any or {1, "s", true}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} product any or {0, nan, ""}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product any or {true, true}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product any or {true, false}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product any or {1, nan, "s", ""}'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product any or {1, "s", true}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product any or {0, nan, ""}'), any([True, True, True, True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{false, true} product any or {true, true}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} product any or {true, false}'), any([True, False, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} product any or {1, nan, "s", ""}'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} product any or {1, "s", False}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} product any or {0, nan, ""}'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} product any or {true, true}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} product any or {true, false}'), any([True, False, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} product any or {1, nan, "s", ""}'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} product any or {1, "s", False}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} product any or {0, nan, ""}'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} product any or {true, true}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} product any or {true, false}'), any([True, False, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} product any or {1, nan, "s", ""}'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} product any or {1, "s", true}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} product any or {0, nan, ""}'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product any or {true, true}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product any or {true, false}'), any([True, False, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product any or {1, nan, "s", ""}'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product any or {1, "s", true}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product any or {0, nan, ""}'), any([False, False, False, True, True, True]))
        # empty
        self.assertEqual(evaluate(DummyPath(), '{true, true} product any or {}'), any([]))

    def test_must_apply_or_seq_vs_seq_product_all(self):
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all or {true, true}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all or {true, false}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all or {1, nan, "s", ""}'), all([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all or {1, "s", true}'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all or {0, nan, ""}'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product all or {true, true}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product all or {true, false}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product all or {1, nan, "s", ""}'), all([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product all or {1, "s", true}'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} product all or {0, nan, ""}'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} product all or {true, true}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} product all or {true, false}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} product all or {1, nan, "s", ""}'), all([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} product all or {1, "s", true}'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} product all or {0, nan, ""}'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product all or {true, true}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product all or {true, false}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product all or {1, nan, "s", ""}'), all([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product all or {1, "s", true}'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} product all or {0, nan, ""}'), all([True, True, True, True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{false, true} product all or {true, true}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} product all or {true, false}'), all([True, False, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} product all or {1, nan, "s", ""}'), all([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} product all or {1, "s", False}'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} product all or {0, nan, ""}'), all([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} product all or {true, true}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} product all or {true, false}'), all([True, False, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} product all or {1, nan, "s", ""}'), all([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} product all or {1, "s", False}'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} product all or {0, nan, ""}'), all([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} product all or {true, true}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} product all or {true, false}'), all([True, False, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} product all or {1, nan, "s", ""}'), all([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} product all or {1, "s", true}'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} product all or {0, nan, ""}'), all([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product all or {true, true}'), all([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product all or {true, false}'), all([True, False, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product all or {1, nan, "s", ""}'), all([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product all or {1, "s", true}'), all([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} product all or {0, nan, ""}'), all([False, False, False, True, True, True]))
        # empty
        self.assertEqual(evaluate(DummyPath(), '{true, true} product all or {}'), all([]))

    def test_must_apply_or_seq_vs_seq(self):  # equiv to product any
        # lhs coerces to true
        self.assertEqual(evaluate(DummyPath(), '{true, true} or {true, true}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} or {true, false}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} or {1, nan, "s", ""}'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} or {1, "s", true}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{true, true} or {0, nan, ""}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} or {true, true}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} or {true, false}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} or {1, nan, "s", ""}'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} or {1, "s", true}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"a", true} or {0, nan, ""}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} or {true, true}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} or {true, false}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} or {1, nan, "s", ""}'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} or {1, "s", true}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1, true} or {0, nan, ""}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} or {true, true}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} or {true, false}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} or {1, nan, "s", ""}'), any([True, True, True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} or {1, "s", true}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{1.5, true} or {0, nan, ""}'), any([True, True, True, True, True, True]))
        # lhs coerces to false
        self.assertEqual(evaluate(DummyPath(), '{false, true} or {true, true}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} or {true, false}'), any([True, False, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} or {1, nan, "s", ""}'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} or {1, "s", False}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{false, true} or {0, nan, ""}'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} or {true, true}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} or {true, false}'), any([True, False, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} or {1, nan, "s", ""}'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} or {1, "s", False}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{"", true} or {0, nan, ""}'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} or {true, true}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} or {true, false}'), any([True, False, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} or {1, nan, "s", ""}'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} or {1, "s", true}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{0, true} or {0, nan, ""}'), any([False, False, False, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} or {true, true}'), any([True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} or {true, false}'), any([True, False, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} or {1, nan, "s", ""}'), any([True, False, True, False, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} or {1, "s", true}'), any([True, True, True, True, True, True]))
        self.assertEqual(evaluate(DummyPath(), '{nan, true} or {0, nan, ""}'), any([False, False, False, True, True, True]))
        # empty
        self.assertEqual(evaluate(DummyPath(), '{true, true} or {}'), any([]))


if __name__ == '__main__':
    unittest.main()
